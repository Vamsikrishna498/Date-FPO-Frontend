{"ast":null,"code":"import _objectSpread from\"C:/karthik cc/date-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';// Create axios instance\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:8080/api',timeout:30000,// Increased from 10000 to 30000 (30 seconds)\nheaders:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});// Authentication API calls\nexport const authAPI={// Login\nlogin:async credentials=>{// Backend expects payload: { userName, password }\nconst payload={userName:credentials.userName||credentials.username||credentials.email,password:credentials.password};const response=await api.post('/auth/login',payload);return response.data;},// Get user profile\ngetProfile:async()=>{// Preferred profile endpoint, then fallbacks\ntry{const res=await api.get('/user/profile');return res.data;}catch(e0){try{const res=await api.get('/auth/me');return res.data;}catch(e1){try{const res=await api.get('/auth/profile');return res.data;}catch(e2){const res=await api.get('/auth/users/profile');return res.data;}}}},// Register user\nregister:async userData=>{const response=await api.post('/auth/register',userData);return response.data;},// Send OTP\nsendOTP:async email=>{try{const response=await api.post('/auth/send-otp',{emailOrPhone:email},{timeout:45000// 45 seconds for OTP operations\n});return response.data;}catch(error){if(error.code==='ECONNABORTED'||error.message.includes('timeout')){throw new Error('OTP request timed out. Please check your internet connection and try again.');}throw error;}},// Verify OTP\nverifyOTP:async otpData=>{try{const response=await api.post('/auth/verify-otp',{emailOrPhone:otpData.email,otp:otpData.otp},{timeout:30000// 30 seconds for OTP verification\n});return response.data;}catch(error){if(error.code==='ECONNABORTED'||error.message.includes('timeout')){throw new Error('OTP verification timed out. Please try again.');}throw error;}},// Resend OTP\nresendOTP:async email=>{try{const response=await api.post('/auth/resend-otp',{emailOrPhone:email},{timeout:45000// 45 seconds for OTP operations\n});return response.data;}catch(error){if(error.code==='ECONNABORTED'||error.message.includes('timeout')){throw new Error('OTP resend timed out. Please check your internet connection and try again.');}throw error;}},// Forgot password\nforgotPassword:async emailOrPhone=>{const response=await api.post('/auth/forgot-password',{emailOrPhone});return response.data;},// Forgot user ID\nforgotUserId:async emailOrPhone=>{const response=await api.post('/auth/forgot-user-id',{emailOrPhone});return response.data;},// Reset password\nresetPassword:async resetData=>{const response=await api.post('/auth/reset-password',resetData);return response.data;},// Change password\nchangePassword:async passwordData=>{const response=await api.post('/auth/change-password',passwordData);return response.data;},// Change user ID\nchangeUserId:async userIdData=>{const response=await api.post('/auth/change-user-id',userIdData);return response.data;},// Get countries\ngetCountries:async()=>{const response=await api.get('/auth/countries');return response.data;},// Get states\ngetStates:async countryId=>{const response=await api.post('/auth/states',{countryId});return response.data;},// Get address by pincode\ngetAddressByPincode:async pincode=>{const response=await api.get(\"/auth/pincode/\".concat(pincode));return response.data;}};// Admin API calls\nexport const adminAPI={// Get pending user registrations\ngetPendingRegistrations:async()=>{const response=await api.get('/admin/pending-registrations');return response.data;},// Get approved users\ngetApprovedUsers:async()=>{const response=await api.get('/admin/approved-users');return response.data;},// Approve user registration\napproveUser:async(userId,role)=>{const response=await api.put(\"/admin/users/\".concat(userId,\"/approve\"),{role});return response.data;},// Reject user registration\nrejectUser:async(userId,reason)=>{const response=await api.put(\"/admin/users/\".concat(userId,\"/reject\"),{reason});return response.data;},// Get all farmers\ngetAllFarmers:async()=>{const response=await api.get('/admin/farmers');return response.data;},// Get all employees\ngetAllEmployees:async()=>{const response=await api.get('/admin/employees');return response.data;},// Get farmers with KYC status\ngetFarmersWithKycStatus:async()=>{const response=await api.get('/admin/farmers-with-kyc');return response.data;},// Get farmers with KYC (alias for compatibility)\ngetFarmersWithKyc:async()=>{const response=await api.get('/admin/farmers-with-kyc');return response.data;},// Get employees with stats\ngetEmployeesWithStats:async()=>{const response=await api.get('/admin/employees-with-stats');return response.data;},// Get dashboard stats\ngetDashboardStats:async()=>{const response=await api.get('/admin/dashboard-stats');return response.data;},// Get todo list\ngetTodoList:async()=>{const response=await api.get('/admin/todo-list');return response.data;},// Get enhanced todo list\ngetEnhancedTodoList:async()=>{const response=await api.get('/admin/enhanced-todo-list');return response.data;},// Assign farmer to employee\nassignFarmerToEmployee:async(farmerId,employeeId)=>{const response=await api.post('/admin/assign-farmer',null,{params:{farmerId,employeeId}});return response.data;},// Bulk assign farmers to employee\nbulkAssignFarmers:async(farmerIds,employeeId)=>{const response=await api.post('/admin/bulk-assign-farmers',{farmerIds,employeeId});return response.data;},// Get assignment history\ngetAssignmentHistory:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/assignment-history',{params:filters});return response.data;},// Get farmers by assignment status\ngetFarmersByAssignmentStatus:async assignmentStatus=>{const response=await api.get('/admin/farmers/by-assignment-status',{params:{assignmentStatus}});return response.data;},// Filter farmers\nfilterFarmers:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/farmers/filter',{params:filters});return response.data;},// Get locations (states and districts)\ngetLocations:async()=>{const response=await api.get('/admin/locations');return response.data;},// Get farmers by employee\ngetFarmersByEmployee:async employeeId=>{const response=await api.get(\"/admin/employees/\".concat(employeeId,\"/assigned-farmers\"));return response.data;},// Get all registrations for admin\ngetAllRegistrations:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/registration-list',{params:filters});return response.data;},// Get registration list by status for admin\ngetRegistrationListByStatus:async status=>{const response=await api.get('/admin/registration-list/filter',{params:{status}});return response.data;},// Get employee by ID\ngetEmployeeById:async employeeId=>{const response=await api.get(\"/admin/employees/\".concat(employeeId));return response.data;},// Update employee\nupdateEmployee:async(employeeId,employeeData)=>{const response=await api.put(\"/admin/employees/\".concat(employeeId),employeeData);return response.data;},// Approve registration for admin (alternative method)\napproveRegistration:async(registrationId,approvalData)=>{const response=await api.post(\"/admin/registrations/\".concat(registrationId,\"/approve\"),approvalData);return response.data;},// Reject registration for admin (alternative method)\nrejectRegistration:async(registrationId,rejectionData)=>{const response=await api.post(\"/admin/registrations/\".concat(registrationId,\"/reject\"),rejectionData);return response.data;}};// Super Admin API calls\nexport const superAdminAPI={// Get all users (registrations)\ngetAllUsers:async()=>{const response=await api.get('/super-admin/registration-list');return response.data;},// Get registration list with filters\ngetRegistrationList:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/super-admin/registration-list',{params:filters});return response.data;},// Get registration list by status\ngetRegistrationListByStatus:async status=>{const response=await api.get('/super-admin/registration-list/filter',{params:{status}});return response.data;},// Search registrations\nsearchRegistrations:async query=>{const response=await api.get('/super-admin/registration-list/search',{params:{query}});return response.data;},// Get pending registrations\ngetPendingRegistrations:async()=>{const response=await api.get('/super-admin/pending-registrations');return response.data;},// Get approved users\ngetApprovedUsers:async()=>{const response=await api.get('/super-admin/approved-users');return response.data;},// Get users by role\ngetUsersByRole:async role=>{const response=await api.get(\"/super-admin/users/by-role/\".concat(role));return response.data;},// Get pending users by role\ngetPendingUsersByRole:async role=>{const response=await api.get(\"/super-admin/pending-users/by-role/\".concat(role));return response.data;},// Approve user\napproveUser:async(userId,role)=>{try{// Try multiple endpoint variations for compatibility\nlet response;let lastError;// Strategy 1: Try auth endpoint with PUT method\ntry{console.log('🔄 Trying PUT /auth/users/'+userId+'/approve');response=await api.put(\"/auth/users/\".concat(userId,\"/approve\"),{role});console.log('✅ Success with PUT /auth/users/'+userId+'/approve');return response.data;}catch(error){var _error$response2;lastError=error;console.log('❌ Failed with PUT /auth/users/'+userId+'/approve:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status);}// Strategy 2: Try auth endpoint with POST method\ntry{console.log('🔄 Trying POST /auth/users/'+userId+'/approve');response=await api.post(\"/auth/users/\".concat(userId,\"/approve\"),{role});console.log('✅ Success with POST /auth/users/'+userId+'/approve');return response.data;}catch(error){var _error$response3;lastError=error;console.log('❌ Failed with POST /auth/users/'+userId+'/approve:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status);}// Strategy 3: Try super-admin endpoint\ntry{console.log('🔄 Trying PUT /super-admin/users/'+userId+'/approve');response=await api.put(\"/super-admin/users/\".concat(userId,\"/approve\"),{role});console.log('✅ Success with PUT /super-admin/users/'+userId+'/approve');return response.data;}catch(error){var _error$response4;lastError=error;console.log('❌ Failed with PUT /super-admin/users/'+userId+'/approve:',(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status);}// Strategy 4: Try registrations endpoint\ntry{console.log('🔄 Trying POST /registrations/'+userId+'/approve');response=await api.post(\"/registrations/\".concat(userId,\"/approve\"),{approvedBy:'Super Admin',approvalNotes:\"User approved with role: \".concat(role),role:role});console.log('✅ Success with POST /registrations/'+userId+'/approve');return response.data;}catch(error){var _error$response5;lastError=error;console.log('❌ Failed with POST /registrations/'+userId+'/approve:',(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status);}// Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\ntry{console.log('🔄 Trying PUT /employees/'+userId+'/approve');response=await api.put(\"/employees/\".concat(userId,\"/approve\"),{role});console.log('✅ Success with PUT /employees/'+userId+'/approve');return response.data;}catch(error){var _error$response6;lastError=error;console.log('❌ Failed with PUT /employees/'+userId+'/approve:',(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status);}// Strategy 6: Try employee status update\ntry{console.log('🔄 Trying PUT /employees/'+userId+'/status');response=await api.put(\"/employees/\".concat(userId,\"/status\"),{status:'APPROVED',role});console.log('✅ Success with PUT /employees/'+userId+'/status');return response.data;}catch(error){var _error$response7;lastError=error;console.log('❌ Failed with PUT /employees/'+userId+'/status:',(_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.status);}// Strategy 7: Try user status update\ntry{console.log('🔄 Trying PUT /users/'+userId+'/status');response=await api.put(\"/users/\".concat(userId,\"/status\"),{status:'APPROVED',role});console.log('✅ Success with PUT /users/'+userId+'/status');return response.data;}catch(error){var _error$response8;lastError=error;console.log('❌ Failed with PUT /users/'+userId+'/status:',(_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.status);}// If all strategies fail, throw the last error\nthrow lastError;}catch(error){var _error$response9;console.error('❌ All approval strategies failed:',error);console.error('❌ Error response:',(_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data);throw error;}},// Reject user (update status to REJECTED)\nrejectUser:async(userId,reason)=>{try{// Try multiple endpoint variations for compatibility\nlet response;let lastError;// Strategy 1: Try auth endpoint with PUT method\ntry{console.log('🔄 Trying PUT /auth/users/'+userId+'/reject');response=await api.put(\"/auth/users/\".concat(userId,\"/reject\"),{reason});console.log('✅ Success with PUT /auth/users/'+userId+'/reject');return response.data;}catch(error){var _error$response0;lastError=error;console.log('❌ Failed with PUT /auth/users/'+userId+'/reject:',(_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.status);}// Strategy 2: Try auth endpoint with POST method\ntry{console.log('🔄 Trying POST /auth/users/'+userId+'/reject');response=await api.post(\"/auth/users/\".concat(userId,\"/reject\"),{reason});console.log('✅ Success with POST /auth/users/'+userId+'/reject');return response.data;}catch(error){var _error$response1;lastError=error;console.log('❌ Failed with POST /auth/users/'+userId+'/reject:',(_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.status);}// Strategy 3: Try super-admin endpoint\ntry{console.log('🔄 Trying PUT /super-admin/users/'+userId+'/reject');response=await api.put(\"/super-admin/users/\".concat(userId,\"/reject\"),{reason});console.log('✅ Success with PUT /super-admin/users/'+userId+'/reject');return response.data;}catch(error){var _error$response10;lastError=error;console.log('❌ Failed with PUT /super-admin/users/'+userId+'/reject:',(_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.status);}// Strategy 4: Try registrations endpoint\ntry{console.log('🔄 Trying POST /registrations/'+userId+'/reject');response=await api.post(\"/registrations/\".concat(userId,\"/reject\"),{rejectedBy:'Super Admin',rejectionReason:reason||'Registration rejected by Super Admin'});console.log('✅ Success with POST /registrations/'+userId+'/reject');return response.data;}catch(error){var _error$response11;lastError=error;console.log('❌ Failed with POST /registrations/'+userId+'/reject:',(_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.status);}// Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\ntry{console.log('🔄 Trying PUT /employees/'+userId+'/reject');response=await api.put(\"/employees/\".concat(userId,\"/reject\"),{reason});console.log('✅ Success with PUT /employees/'+userId+'/reject');return response.data;}catch(error){var _error$response12;lastError=error;console.log('❌ Failed with PUT /employees/'+userId+'/reject:',(_error$response12=error.response)===null||_error$response12===void 0?void 0:_error$response12.status);}// Strategy 6: Try employee status update\ntry{console.log('🔄 Trying PUT /employees/'+userId+'/status');response=await api.put(\"/employees/\".concat(userId,\"/status\"),{status:'REJECTED',reason});console.log('✅ Success with PUT /employees/'+userId+'/status');return response.data;}catch(error){var _error$response13;lastError=error;console.log('❌ Failed with PUT /employees/'+userId+'/status:',(_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.status);}// Strategy 7: Try user status update\ntry{console.log('🔄 Trying PUT /users/'+userId+'/status');response=await api.put(\"/users/\".concat(userId,\"/status\"),{status:'REJECTED',reason});console.log('✅ Success with PUT /users/'+userId+'/status');return response.data;}catch(error){var _error$response14;lastError=error;console.log('❌ Failed with PUT /users/'+userId+'/status:',(_error$response14=error.response)===null||_error$response14===void 0?void 0:_error$response14.status);}// If all strategies fail, throw the last error\nthrow lastError;}catch(error){var _error$response15;console.error('❌ All rejection strategies failed:',error);console.error('❌ Error response:',(_error$response15=error.response)===null||_error$response15===void 0?void 0:_error$response15.data);throw error;}},// Delete user\ndeleteUser:async userId=>{const response=await api.delete(\"/super-admin/users/\".concat(userId));return response.data;},// Update user\nupdateUser:async(userId,userData)=>{const response=await api.put(\"/super-admin/users/\".concat(userId),userData);return response.data;},// Update user status\nupdateUserStatus:async(userId,status)=>{const response=await api.put(\"/auth/users/\".concat(userId,\"/status\"),{status});return response.data;},// Get dashboard stats\ngetDashboardStats:async()=>{const response=await api.get('/public/dashboard/stats');return response.data;},// Bulk assign farmers to employee\nbulkAssignFarmers:async(farmerIds,employeeId)=>{const response=await api.post('/super-admin/bulk-assign-farmers',{farmerIds,employeeId});return response.data;},// Single assign farmer to employee (fallback)\nassignFarmer:async(farmerId,employeeId)=>{const response=await api.post('/super-admin/assign-farmer',null,{params:{farmerId,employeeId}});return response.data;},// Get employee by ID\ngetEmployeeById:async employeeId=>{const response=await api.get(\"/super-admin/employees/\".concat(employeeId));return response.data;},// Update employee\nupdateEmployee:async(employeeId,employeeData)=>{const response=await api.put(\"/super-admin/employees/\".concat(employeeId),employeeData);return response.data;},// Get user by ID\ngetUserById:async userId=>{const response=await api.get(\"/super-admin/users/\".concat(userId));return response.data;},// Force password change\nforcePasswordChange:async userId=>{const response=await api.put(\"/super-admin/users/\".concat(userId,\"/force-password-change\"));return response.data;}};// Farmers API calls\nexport const farmersAPI={// Get all farmers\ngetAllFarmers:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/super-admin/farmers',{params:filters});return response.data;},// Get farmer by ID\ngetFarmerById:async id=>{const response=await api.get(\"/super-admin/farmers/\".concat(id));return response.data;},// Create farmer (supports files)\ncreateFarmer:async farmerData=>{// Use the /api/farmers endpoint which supports multipart/form-data\nconst formData=new FormData();// Extract file fields - check all possible file field names\nconst photo=farmerData.photo;const passbookPhoto=farmerData.passbookFile||farmerData.passbookPhoto;const aadhaar=farmerData.documentFileName;// Map documentFileName to aadhaar\nconst soilTestCertificate=farmerData.soilTestCertificate||farmerData.currentSoilTestCertificateFileName;console.log('🔍 File fields found:');console.log('  - photo:',photo);console.log('  - passbookPhoto:',passbookPhoto);console.log('  - aadhaar:',aadhaar);console.log('  - soilTestCertificate:',soilTestCertificate);// Create farmerDto object without file fields and fix field mappings\nconst farmerDto=_objectSpread({},farmerData);// Remove file fields and any other non-serializable objects\ndelete farmerDto.photo;delete farmerDto.passbookPhoto;delete farmerDto.passbookFile;// Also remove passbookFile\ndelete farmerDto.documentFileName;delete farmerDto.soilTestCertificate;delete farmerDto.currentSoilTestCertificateFileName;// Remove any other potential File objects or complex objects\nObject.keys(farmerDto).forEach(key=>{if(farmerDto[key]instanceof File||farmerDto[key]instanceof Blob){delete farmerDto[key];}});// Fix field name mappings\nif(farmerDto.alternativeNumber){farmerDto.alternativeContactNumber=farmerDto.alternativeNumber;delete farmerDto.alternativeNumber;}// Ensure required fields have default values if missing\nif(!farmerDto.salutation)farmerDto.salutation='Mr';if(!farmerDto.lastName)farmerDto.lastName=farmerDto.firstName||'Unknown';if(!farmerDto.dateOfBirth)farmerDto.dateOfBirth='1990-01-01';if(!farmerDto.gender)farmerDto.gender='Male';if(!farmerDto.nationality)farmerDto.nationality='Indian';if(!farmerDto.country)farmerDto.country='India';// Log the final farmerDto object for debugging\nconsole.log('🔍 Final farmerDto object (after cleanup):',farmerDto);console.log('🔍 Required fields check:');console.log('  - salutation:',farmerDto.salutation);console.log('  - firstName:',farmerDto.firstName);console.log('  - lastName:',farmerDto.lastName);console.log('  - dateOfBirth:',farmerDto.dateOfBirth);console.log('  - gender:',farmerDto.gender);console.log('  - nationality:',farmerDto.nationality);console.log('  - country:',farmerDto.country);// Ensure contact numbers match pattern (10 digits)\nif(farmerDto.contactNumber&&!/^\\d{10}$/.test(farmerDto.contactNumber)){console.warn('⚠️ Contact number must be 10 digits:',farmerDto.contactNumber);}if(farmerDto.alternativeContactNumber&&!/^\\d{10}$/.test(farmerDto.alternativeContactNumber)){console.warn('⚠️ Alternative contact number must be 10 digits:',farmerDto.alternativeContactNumber);}// Ensure pincode is 6 digits\nif(farmerDto.pincode&&!/^\\d{6}$/.test(farmerDto.pincode)){console.warn('⚠️ Pincode must be 6 digits:',farmerDto.pincode);}// Add farmerDto as JSON string\nconst farmerDtoJson=JSON.stringify(farmerDto);console.log('🔍 farmerDto JSON being sent:',farmerDtoJson);console.log('🔍 farmerDto object before JSON.stringify:',farmerDto);formData.append('farmerDto',farmerDtoJson);// Add files if they exist\nif(photo instanceof File){formData.append('photo',photo);}if(passbookPhoto instanceof File){formData.append('passbookPhoto',passbookPhoto);}if(aadhaar instanceof File){formData.append('aadhaar',aadhaar);}if(soilTestCertificate instanceof File){formData.append('soilTestCertificate',soilTestCertificate);}console.log('🔍 Sending to /api/farmers with multipart data');try{const response=await api.post('/farmers',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){var _error$response16,_error$response17;console.error('❌ Server error details:',(_error$response16=error.response)===null||_error$response16===void 0?void 0:_error$response16.data);if(((_error$response17=error.response)===null||_error$response17===void 0?void 0:_error$response17.status)===500){var _error$response18,_error$response18$dat;throw new Error(\"Server error: \".concat(((_error$response18=error.response)===null||_error$response18===void 0?void 0:(_error$response18$dat=_error$response18.data)===null||_error$response18$dat===void 0?void 0:_error$response18$dat.message)||'Internal server error. Please check all required fields.'));}throw error;}},// Update farmer\nupdateFarmer:async(id,farmerData)=>{const response=await api.put(\"/super-admin/farmers/\".concat(id),farmerData);return response.data;},// Delete farmer\ndeleteFarmer:async id=>{const response=await api.delete(\"/super-admin/farmers/\".concat(id));return response.data;},// Assign farmer to employee\nassignFarmer:async(farmerId,employeeId)=>{const response=await api.post(\"/super-admin/farmers/\".concat(farmerId,\"/assign\"),{employeeId});return response.data;},// Get farmer statistics\ngetFarmerStats:async()=>{const response=await api.get('/super-admin/farmers/stats');return response.data;}};// Employees API calls (for Super Admin and Admin)\nexport const employeesAPI={// Get all employees\ngetAllEmployees:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/super-admin/employees',{params:filters});return response.data;},// Get employee by ID\ngetEmployeeById:async id=>{const response=await api.get(\"/super-admin/employees/\".concat(id));return response.data;},// Create employee\ncreateEmployee:async employeeData=>{const response=await api.post('/super-admin/employees',employeeData);return response.data;},// Update employee\nupdateEmployee:async(id,employeeData)=>{const response=await api.put(\"/super-admin/employees/\".concat(id),employeeData);return response.data;},// Delete employee\ndeleteEmployee:async id=>{const response=await api.delete(\"/super-admin/employees/\".concat(id));return response.data;},// Get assigned farmers for employee\ngetAssignedFarmers:async employeeId=>{const response=await api.get(\"/super-admin/employees/\".concat(employeeId,\"/assigned-farmers\"));return response.data;},// Get employee statistics\ngetEmployeeStats:async()=>{const response=await api.get('/super-admin/employees/stats');return response.data;}};// Employee-specific API calls (for Employee role)\nexport const employeeAPI={// Get assigned farmers for current employee\ngetAssignedFarmers:async employeeId=>{try{console.log('🔄 Fetching assigned farmers from dashboard endpoint');const response=await api.get('/employees/dashboard/assigned-farmers');console.log('✅ Success with dashboard endpoint');return response.data;}catch(error){console.error('❌ Failed to fetch assigned farmers:',error);throw error;}},// Get employee profile\ngetProfile:async()=>{const response=await api.get('/employees/profile');return response.data;},// Update employee profile\nupdateProfile:async profileData=>{const response=await api.put('/employees/profile',profileData);return response.data;},// Get employee statistics\ngetStats:async()=>{const response=await api.get('/employees/stats');return response.data;}};// Registrations API calls\nexport const registrationsAPI={// Get all registrations\ngetAllRegistrations:async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/registrations',{params:filters});return response.data;},// Get registration by ID\ngetRegistrationById:async id=>{const response=await api.get(\"/registrations/\".concat(id));return response.data;},// Approve registration\napproveRegistration:async(id,approvalData)=>{const response=await api.post(\"/registrations/\".concat(id,\"/approve\"),approvalData);return response.data;},// Reject registration\nrejectRegistration:async(id,rejectionData)=>{const response=await api.post(\"/registrations/\".concat(id,\"/reject\"),rejectionData);return response.data;},// Get registration statistics\ngetRegistrationStats:async()=>{const response=await api.get('/registrations/stats');return response.data;}};// KYC API calls\nexport const kycAPI={// Upload KYC documents\nuploadDocuments:async(farmerId,documents)=>{const formData=new FormData();Object.keys(documents).forEach(key=>{if(documents[key]){formData.append(key,documents[key]);}});const response=await api.post(\"/employees/kyc/\".concat(farmerId,\"/upload\"),formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Approve KYC\napproveKYC:async(farmerId,approvalData)=>{const response=await api.put(\"/employees/kyc/approve/\".concat(farmerId));return response.data;},// Reject KYC\nrejectKYC:async(farmerId,rejectionData)=>{const response=await api.put(\"/employees/kyc/reject/\".concat(farmerId),{reason:rejectionData.reason||'KYC rejected'});return response.data;},// Refer back KYC\nreferBackKYC:async(farmerId,referBackData)=>{const response=await api.put(\"/employees/kyc/refer-back/\".concat(farmerId),{reason:referBackData.reason||'KYC referred back'});return response.data;},// Get KYC status\ngetKYCStatus:async farmerId=>{const response=await api.get(\"/employees/kyc/\".concat(farmerId,\"/status\"));return response.data;},// Get KYC documents\ngetKYCDocuments:async farmerId=>{const response=await api.get(\"/employees/kyc/\".concat(farmerId,\"/documents\"));return response.data;}};// Dashboard API calls\nexport const dashboardAPI={// Get dashboard statistics\ngetDashboardStats:async()=>{const response=await api.get('/dashboard/stats');return response.data;},// Get admin dashboard data\ngetAdminDashboardData:async()=>{const response=await api.get('/dashboard/admin');return response.data;},// Get super admin dashboard data\ngetSuperAdminDashboardData:async()=>{const response=await api.get('/dashboard/super-admin');return response.data;},// Get employee dashboard data\ngetEmployeeDashboardData:async employeeId=>{const response=await api.get(\"/dashboard/employee/\".concat(employeeId));return response.data;},// Get recent activity\ngetRecentActivity:async()=>{const response=await api.get('/dashboard/recent-activity');return response.data;}};// Main API service object (for backward compatibility)\nexport const apiService={// Authentication\nlogin:authAPI.login,getProfile:authAPI.getProfile,register:authAPI.register,sendOTP:authAPI.sendOTP,verifyOTP:authAPI.verifyOTP,resendOTP:authAPI.resendOTP,forgotPassword:authAPI.forgotPassword,forgotUserId:authAPI.forgotUserId,resetPassword:authAPI.resetPassword,changePassword:authAPI.changePassword,changeUserId:authAPI.changeUserId,logout:()=>{localStorage.removeItem('token');localStorage.removeItem('user');},// User management\ngetAllUsers:superAdminAPI.getAllUsers,getUserById:superAdminAPI.getUserById,updateUser:superAdminAPI.updateUser,deleteUser:superAdminAPI.deleteUser,forcePasswordChange:superAdminAPI.forcePasswordChange,// Farmer management\ncreateFarmer:farmersAPI.createFarmer,getFarmerById:farmersAPI.getFarmerById,getAllFarmers:farmersAPI.getAllFarmers,updateFarmer:farmersAPI.updateFarmer,deleteFarmer:farmersAPI.deleteFarmer,getAddressByPincode:authAPI.getAddressByPincode,getFarmerDashboardData:async email=>{try{const response=await api.get(\"/farmers/dashboard/by-email?email=\".concat(email));return response.data;}catch(error){console.warn('Farmer dashboard endpoint not available, trying alternative:',error);// Try alternative endpoint\ntry{const response=await api.get(\"/farmers/by-email?email=\".concat(email));return response.data;}catch(altError){console.warn('Alternative farmer endpoint also failed:',altError);throw error;// Re-throw original error\n}}},// Employee management\ncreateEmployee:employeesAPI.createEmployee,getEmployeeById:employeesAPI.getEmployeeById,getAllEmployees:employeesAPI.getAllEmployees,updateEmployee:employeesAPI.updateEmployee,deleteEmployee:employeesAPI.deleteEmployee,assignFarmerToEmployee:adminAPI.assignFarmer,getFarmersByEmployee:adminAPI.getFarmersByEmployee,approveKyc:kycAPI.approveKYC,referBackKyc:kycAPI.referBackKYC,rejectKyc:kycAPI.rejectKYC,// Dashboard\ngetDashboardStats:dashboardAPI.getDashboardStats,getRecentActivity:dashboardAPI.getRecentActivity,getFarmerStats:farmersAPI.getFarmerStats,getEmployeeStats:employeesAPI.getEmployeeStats,getKycStats:kycAPI.getKYCStatus,// Bulk Operations\nbulkImport:async(type,formData)=>{const response=await api.post(\"/bulk/import/\".concat(type),formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},bulkExport:async(type,filters)=>{const response=await api.post(\"/bulk/export/\".concat(type),filters,{responseType:'blob'});return response.data;},downloadTemplate:async type=>{const response=await api.get(\"/bulk/template/\".concat(type),{responseType:'blob'});return response.data;},getImportStatus:async importId=>{const response=await api.get(\"/bulk/import/status/\".concat(importId));return response.data;},getImportHistory:async userEmail=>{const response=await api.get(\"/bulk/import/history?userEmail=\".concat(userEmail));return response.data;},bulkAssignFarmersToEmployee:async(farmerIds,employeeId)=>{const response=await api.post('/bulk/assign/farmers-to-employee',null,{params:{farmerIds:farmerIds.join(','),employeeId}});return response.data;},// New: assign by farmer names and employee email\nbulkAssignFarmersByNames:async(farmerNames,employeeEmail)=>{const response=await api.post('/bulk/assign/farmers-by-names',{farmerNames,employeeEmail});return response.data;},bulkAssignFarmersByLocation:async(location,employee)=>{const params={location};if(typeof employee==='string')params.employeeEmail=employee;else if(employee!=null)params.employeeId=employee;const response=await api.post('/bulk/assign/farmers-by-location',null,{params});return response.data;},bulkAssignFarmersRoundRobin:async farmerIds=>{const response=await api.post('/bulk/assign/farmers-round-robin',null,{params:{farmerIds:farmerIds.join(',')}});return response.data;}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","payload","userName","username","email","password","post","data","getProfile","res","get","e0","e1","e2","register","userData","sendOTP","emailOrPhone","code","message","includes","Error","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","getAddressByPincode","pincode","adminAPI","getPendingRegistrations","getApprovedUsers","approveUser","userId","role","put","rejectUser","reason","getAllFarmers","getAllEmployees","getFarmersWithKycStatus","getFarmersWithKyc","getEmployeesWithStats","getDashboardStats","getTodoList","getEnhancedTodoList","assignFarmerToEmployee","farmerId","employeeId","params","bulkAssignFarmers","farmerIds","getAssignmentHistory","filters","arguments","length","undefined","getFarmersByAssignmentStatus","assignmentStatus","filterFarmers","getLocations","getFarmersByEmployee","getAllRegistrations","getRegistrationListByStatus","getEmployeeById","updateEmployee","employeeData","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","superAdminAPI","getAllUsers","getRegistrationList","searchRegistrations","query","getUsersByRole","getPendingUsersByRole","lastError","console","log","_error$response2","_error$response3","_error$response4","approvedBy","approvalNotes","_error$response5","_error$response6","_error$response7","_error$response8","_error$response9","_error$response0","_error$response1","_error$response10","rejectedBy","rejectionReason","_error$response11","_error$response12","_error$response13","_error$response14","_error$response15","deleteUser","delete","updateUser","updateUserStatus","assignFarmer","getUserById","forcePasswordChange","farmersAPI","getFarmerById","id","createFarmer","farmerData","formData","FormData","photo","passbookPhoto","passbookFile","aadhaar","documentFileName","soilTestCertificate","currentSoilTestCertificateFileName","farmerDto","_objectSpread","Object","keys","forEach","key","File","Blob","alternativeNumber","alternativeContactNumber","salutation","lastName","firstName","dateOfBirth","gender","nationality","country","contactNumber","test","warn","farmerDtoJson","JSON","stringify","append","_error$response16","_error$response17","_error$response18","_error$response18$dat","updateFarmer","deleteFarmer","getFarmerStats","employeesAPI","createEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","updateProfile","profileData","getStats","registrationsAPI","getRegistrationById","getRegistrationStats","kycAPI","uploadDocuments","documents","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","dashboardAPI","getAdminDashboardData","getSuperAdminDashboardData","getEmployeeDashboardData","getRecentActivity","apiService","logout","getFarmerDashboardData","altError","approveKyc","referBackKyc","rejectKyc","getKycStats","bulkImport","type","bulkExport","responseType","downloadTemplate","getImportStatus","importId","getImportHistory","userEmail","bulkAssignFarmersToEmployee","join","bulkAssignFarmersByNames","farmerNames","employeeEmail","bulkAssignFarmersByLocation","employee","bulkAssignFarmersRoundRobin"],"sources":["C:/karthik cc/date-frontend/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n  timeout: 30000, // Increased from 10000 to 30000 (30 seconds)\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    // Backend expects payload: { userName, password }\r\n    const payload = {\r\n      userName: credentials.userName || credentials.username || credentials.email,\r\n      password: credentials.password,\r\n    };\r\n    const response = await api.post('/auth/login', payload);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    // Preferred profile endpoint, then fallbacks\r\n    try {\r\n      const res = await api.get('/user/profile');\r\n      return res.data;\r\n    } catch (e0) {\r\n      try {\r\n        const res = await api.get('/auth/me');\r\n        return res.data;\r\n      } catch (e1) {\r\n        try {\r\n          const res = await api.get('/auth/profile');\r\n          return res.data;\r\n        } catch (e2) {\r\n          const res = await api.get('/auth/users/profile');\r\n          return res.data;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  // Register user\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send OTP\r\n  sendOTP: async (email) => {\r\n    try {\r\n      const response = await api.post('/auth/send-otp', { emailOrPhone: email }, {\r\n        timeout: 45000 // 45 seconds for OTP operations\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n        throw new Error('OTP request timed out. Please check your internet connection and try again.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Verify OTP\r\n  verifyOTP: async (otpData) => {\r\n    try {\r\n      const response = await api.post('/auth/verify-otp', { \r\n        emailOrPhone: otpData.email, \r\n        otp: otpData.otp \r\n      }, {\r\n        timeout: 30000 // 30 seconds for OTP verification\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n        throw new Error('OTP verification timed out. Please try again.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOTP: async (email) => {\r\n    try {\r\n      const response = await api.post('/auth/resend-otp', { emailOrPhone: email }, {\r\n        timeout: 45000 // 45 seconds for OTP operations\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n        throw new Error('OTP resend timed out. Please check your internet connection and try again.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot user ID\r\n  forgotUserId: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    const response = await api.post('/auth/reset-password', resetData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await api.post('/auth/change-password', passwordData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change user ID\r\n  changeUserId: async (userIdData) => {\r\n    const response = await api.post('/auth/change-user-id', userIdData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get countries\r\n  getCountries: async () => {\r\n    const response = await api.get('/auth/countries');\r\n    return response.data;\r\n  },\r\n\r\n  // Get states\r\n  getStates: async (countryId) => {\r\n    const response = await api.post('/auth/states', { countryId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get address by pincode\r\n  getAddressByPincode: async (pincode) => {\r\n    const response = await api.get(`/auth/pincode/${pincode}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Admin API calls\r\nexport const adminAPI = {\r\n  // Get pending user registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/admin/approved-users');\r\n    return response.data;\r\n  },\r\n  \r\n  // Approve user registration\r\n  approveUser: async (userId, role) => {\r\n    const response = await api.put(`/admin/users/${userId}/approve`, { role });\r\n    return response.data;\r\n  },\r\n  \r\n  // Reject user registration\r\n  rejectUser: async (userId, reason) => {\r\n    const response = await api.put(`/admin/users/${userId}/reject`, { reason });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get all farmers\r\n  getAllFarmers: async () => {\r\n    const response = await api.get('/admin/farmers');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get all employees\r\n  getAllEmployees: async () => {\r\n    const response = await api.get('/admin/employees');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get farmers with KYC status\r\n  getFarmersWithKycStatus: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get farmers with KYC (alias for compatibility)\r\n  getFarmersWithKyc: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get employees with stats\r\n  getEmployeesWithStats: async () => {\r\n    const response = await api.get('/admin/employees-with-stats');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/admin/dashboard-stats');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get todo list\r\n  getTodoList: async () => {\r\n    const response = await api.get('/admin/todo-list');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get enhanced todo list\r\n  getEnhancedTodoList: async () => {\r\n    const response = await api.get('/admin/enhanced-todo-list');\r\n    return response.data;\r\n  },\r\n  \r\n  // Assign farmer to employee\r\n  assignFarmerToEmployee: async (farmerId, employeeId) => {\r\n    const response = await api.post('/admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/admin/bulk-assign-farmers', { \r\n      farmerIds, employeeId \r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get assignment history\r\n  getAssignmentHistory: async (filters = {}) => {\r\n    const response = await api.get('/admin/assignment-history', { params: filters });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get farmers by assignment status\r\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\r\n    const response = await api.get('/admin/farmers/by-assignment-status', { \r\n      params: { assignmentStatus } \r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Filter farmers\r\n  filterFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers/filter', { params: filters });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get locations (states and districts)\r\n  getLocations: async () => {\r\n    const response = await api.get('/admin/locations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by employee\r\n  getFarmersByEmployee: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations for admin\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status for admin\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (employeeId, employeeData) => {\r\n    const response = await api.put(`/admin/employees/${employeeId}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration for admin (alternative method)\r\n  approveRegistration: async (registrationId, approvalData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration for admin (alternative method)\r\n  rejectRegistration: async (registrationId, rejectionData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Super Admin API calls\r\nexport const superAdminAPI = {\r\n  // Get all users (registrations)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/super-admin/registration-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list with filters\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/super-admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/super-admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get users by role\r\n  getUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending users by role\r\n  getPendingUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve user\r\n  approveUser: async (userId, role) => {\r\n    try {\r\n      // Try multiple endpoint variations for compatibility\r\n      let response;\r\n      let lastError;\r\n      \r\n      // Strategy 1: Try auth endpoint with PUT method\r\n      try {\r\n        console.log('🔄 Trying PUT /auth/users/' + userId + '/approve');\r\n        response = await api.put(`/auth/users/${userId}/approve`, { role });\r\n        console.log('✅ Success with PUT /auth/users/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /auth/users/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 2: Try auth endpoint with POST method\r\n      try {\r\n        console.log('🔄 Trying POST /auth/users/' + userId + '/approve');\r\n        response = await api.post(`/auth/users/${userId}/approve`, { role });\r\n        console.log('✅ Success with POST /auth/users/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /auth/users/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 3: Try super-admin endpoint\r\n      try {\r\n        console.log('🔄 Trying PUT /super-admin/users/' + userId + '/approve');\r\n        response = await api.put(`/super-admin/users/${userId}/approve`, { role });\r\n        console.log('✅ Success with PUT /super-admin/users/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /super-admin/users/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 4: Try registrations endpoint\r\n      try {\r\n        console.log('🔄 Trying POST /registrations/' + userId + '/approve');\r\n        response = await api.post(`/registrations/${userId}/approve`, { \r\n          approvedBy: 'Super Admin',\r\n          approvalNotes: `User approved with role: ${role}`,\r\n          role: role\r\n        });\r\n        console.log('✅ Success with POST /registrations/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /registrations/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/approve');\r\n        response = await api.put(`/employees/${userId}/approve`, { role });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 6: Try employee status update\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/status');\r\n        response = await api.put(`/employees/${userId}/status`, { status: 'APPROVED', role });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 7: Try user status update\r\n      try {\r\n        console.log('🔄 Trying PUT /users/' + userId + '/status');\r\n        response = await api.put(`/users/${userId}/status`, { status: 'APPROVED', role });\r\n        console.log('✅ Success with PUT /users/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /users/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // If all strategies fail, throw the last error\r\n      throw lastError;\r\n    } catch (error) {\r\n      console.error('❌ All approval strategies failed:', error);\r\n      console.error('❌ Error response:', error.response?.data);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Reject user (update status to REJECTED)\r\n  rejectUser: async (userId, reason) => {\r\n    try {\r\n      // Try multiple endpoint variations for compatibility\r\n      let response;\r\n      let lastError;\r\n      \r\n      // Strategy 1: Try auth endpoint with PUT method\r\n      try {\r\n        console.log('🔄 Trying PUT /auth/users/' + userId + '/reject');\r\n        response = await api.put(`/auth/users/${userId}/reject`, { reason });\r\n        console.log('✅ Success with PUT /auth/users/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /auth/users/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 2: Try auth endpoint with POST method\r\n      try {\r\n        console.log('🔄 Trying POST /auth/users/' + userId + '/reject');\r\n        response = await api.post(`/auth/users/${userId}/reject`, { reason });\r\n        console.log('✅ Success with POST /auth/users/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /auth/users/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 3: Try super-admin endpoint\r\n      try {\r\n        console.log('🔄 Trying PUT /super-admin/users/' + userId + '/reject');\r\n        response = await api.put(`/super-admin/users/${userId}/reject`, { reason });\r\n        console.log('✅ Success with PUT /super-admin/users/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /super-admin/users/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 4: Try registrations endpoint\r\n      try {\r\n        console.log('🔄 Trying POST /registrations/' + userId + '/reject');\r\n        response = await api.post(`/registrations/${userId}/reject`, { \r\n          rejectedBy: 'Super Admin',\r\n          rejectionReason: reason || 'Registration rejected by Super Admin'\r\n        });\r\n        console.log('✅ Success with POST /registrations/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /registrations/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/reject');\r\n        response = await api.put(`/employees/${userId}/reject`, { reason });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 6: Try employee status update\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/status');\r\n        response = await api.put(`/employees/${userId}/status`, { status: 'REJECTED', reason });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 7: Try user status update\r\n      try {\r\n        console.log('🔄 Trying PUT /users/' + userId + '/status');\r\n        response = await api.put(`/users/${userId}/status`, { status: 'REJECTED', reason });\r\n        console.log('✅ Success with PUT /users/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /users/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // If all strategies fail, throw the last error\r\n      throw lastError;\r\n    } catch (error) {\r\n      console.error('❌ All rejection strategies failed:', error);\r\n      console.error('❌ Error response:', error.response?.data);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete user\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user status\r\n  updateUserStatus: async (userId, status) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/public/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/super-admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (employeeId, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${employeeId}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user by ID\r\n  getUserById: async (userId) => {\r\n    const response = await api.get(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Force password change\r\n  forcePasswordChange: async (userId) => {\r\n    const response = await api.put(`/super-admin/users/${userId}/force-password-change`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Farmers API calls\r\nexport const farmersAPI = {\r\n  // Get all farmers\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer by ID\r\n  getFarmerById: async (id) => {\r\n    const response = await api.get(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create farmer (supports files)\r\n  createFarmer: async (farmerData) => {\r\n    // Use the /api/farmers endpoint which supports multipart/form-data\r\n    const formData = new FormData();\r\n    \r\n    // Extract file fields - check all possible file field names\r\n    const photo = farmerData.photo;\r\n    const passbookPhoto = farmerData.passbookFile || farmerData.passbookPhoto;\r\n    const aadhaar = farmerData.documentFileName; // Map documentFileName to aadhaar\r\n    const soilTestCertificate = farmerData.soilTestCertificate || farmerData.currentSoilTestCertificateFileName;\r\n    \r\n    console.log('🔍 File fields found:');\r\n    console.log('  - photo:', photo);\r\n    console.log('  - passbookPhoto:', passbookPhoto);\r\n    console.log('  - aadhaar:', aadhaar);\r\n    console.log('  - soilTestCertificate:', soilTestCertificate);\r\n    \r\n    // Create farmerDto object without file fields and fix field mappings\r\n    const farmerDto = { ...farmerData };\r\n    \r\n    // Remove file fields and any other non-serializable objects\r\n    delete farmerDto.photo;\r\n    delete farmerDto.passbookPhoto;\r\n    delete farmerDto.passbookFile; // Also remove passbookFile\r\n    delete farmerDto.documentFileName;\r\n    delete farmerDto.soilTestCertificate;\r\n    delete farmerDto.currentSoilTestCertificateFileName;\r\n    \r\n    // Remove any other potential File objects or complex objects\r\n    Object.keys(farmerDto).forEach(key => {\r\n      if (farmerDto[key] instanceof File || farmerDto[key] instanceof Blob) {\r\n        delete farmerDto[key];\r\n      }\r\n    });\r\n    \r\n    // Fix field name mappings\r\n    if (farmerDto.alternativeNumber) {\r\n      farmerDto.alternativeContactNumber = farmerDto.alternativeNumber;\r\n      delete farmerDto.alternativeNumber;\r\n    }\r\n    \r\n    // Ensure required fields have default values if missing\r\n    if (!farmerDto.salutation) farmerDto.salutation = 'Mr';\r\n    if (!farmerDto.lastName) farmerDto.lastName = farmerDto.firstName || 'Unknown';\r\n    if (!farmerDto.dateOfBirth) farmerDto.dateOfBirth = '1990-01-01';\r\n    if (!farmerDto.gender) farmerDto.gender = 'Male';\r\n    if (!farmerDto.nationality) farmerDto.nationality = 'Indian';\r\n    if (!farmerDto.country) farmerDto.country = 'India';\r\n    \r\n    // Log the final farmerDto object for debugging\r\n    console.log('🔍 Final farmerDto object (after cleanup):', farmerDto);\r\n    console.log('🔍 Required fields check:');\r\n    console.log('  - salutation:', farmerDto.salutation);\r\n    console.log('  - firstName:', farmerDto.firstName);\r\n    console.log('  - lastName:', farmerDto.lastName);\r\n    console.log('  - dateOfBirth:', farmerDto.dateOfBirth);\r\n    console.log('  - gender:', farmerDto.gender);\r\n    console.log('  - nationality:', farmerDto.nationality);\r\n    console.log('  - country:', farmerDto.country);\r\n    \r\n    // Ensure contact numbers match pattern (10 digits)\r\n    if (farmerDto.contactNumber && !/^\\d{10}$/.test(farmerDto.contactNumber)) {\r\n      console.warn('⚠️ Contact number must be 10 digits:', farmerDto.contactNumber);\r\n    }\r\n    if (farmerDto.alternativeContactNumber && !/^\\d{10}$/.test(farmerDto.alternativeContactNumber)) {\r\n      console.warn('⚠️ Alternative contact number must be 10 digits:', farmerDto.alternativeContactNumber);\r\n    }\r\n    \r\n    // Ensure pincode is 6 digits\r\n    if (farmerDto.pincode && !/^\\d{6}$/.test(farmerDto.pincode)) {\r\n      console.warn('⚠️ Pincode must be 6 digits:', farmerDto.pincode);\r\n    }\r\n    \r\n    // Add farmerDto as JSON string\r\n    const farmerDtoJson = JSON.stringify(farmerDto);\r\n    console.log('🔍 farmerDto JSON being sent:', farmerDtoJson);\r\n    console.log('🔍 farmerDto object before JSON.stringify:', farmerDto);\r\n    formData.append('farmerDto', farmerDtoJson);\r\n    \r\n    // Add files if they exist\r\n    if (photo instanceof File) {\r\n      formData.append('photo', photo);\r\n    }\r\n    if (passbookPhoto instanceof File) {\r\n      formData.append('passbookPhoto', passbookPhoto);\r\n    }\r\n    if (aadhaar instanceof File) {\r\n      formData.append('aadhaar', aadhaar);\r\n    }\r\n    if (soilTestCertificate instanceof File) {\r\n      formData.append('soilTestCertificate', soilTestCertificate);\r\n    }\r\n    \r\n    console.log('🔍 Sending to /api/farmers with multipart data');\r\n    try {\r\n      const response = await api.post('/farmers', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Server error details:', error.response?.data);\r\n      if (error.response?.status === 500) {\r\n        throw new Error(`Server error: ${error.response?.data?.message || 'Internal server error. Please check all required fields.'}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update farmer\r\n  updateFarmer: async (id, farmerData) => {\r\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete farmer\r\n  deleteFarmer: async (id) => {\r\n    const response = await api.delete(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign farmer to employee\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer statistics\r\n  getFarmerStats: async () => {\r\n    const response = await api.get('/super-admin/farmers/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n\r\n\r\n// Employees API calls (for Super Admin and Admin)\r\nexport const employeesAPI = {\r\n  // Get all employees\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (id) => {\r\n    const response = await api.get(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create employee\r\n  createEmployee: async (employeeData) => {\r\n    const response = await api.post('/super-admin/employees', employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (id, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete employee\r\n  deleteEmployee: async (id) => {\r\n    const response = await api.delete(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get assigned farmers for employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getEmployeeStats: async () => {\r\n    const response = await api.get('/super-admin/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employee-specific API calls (for Employee role)\r\nexport const employeeAPI = {\r\n  // Get assigned farmers for current employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    try {\r\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\r\n      const response = await api.get('/employees/dashboard/assigned-farmers');\r\n      console.log('✅ Success with dashboard endpoint');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch assigned farmers:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get employee profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/employees/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee profile\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.put('/employees/profile', profileData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Registrations API calls\r\nexport const registrationsAPI = {\r\n  // Get all registrations\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/registrations', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration by ID\r\n  getRegistrationById: async (id) => {\r\n    const response = await api.get(`/registrations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration\r\n  approveRegistration: async (id, approvalData) => {\r\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration\r\n  rejectRegistration: async (id, rejectionData) => {\r\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration statistics\r\n  getRegistrationStats: async () => {\r\n    const response = await api.get('/registrations/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// KYC API calls\r\nexport const kycAPI = {\r\n  // Upload KYC documents\r\n  uploadDocuments: async (farmerId, documents) => {\r\n    const formData = new FormData();\r\n    Object.keys(documents).forEach(key => {\r\n      if (documents[key]) {\r\n        formData.append(key, documents[key]);\r\n      }\r\n    });\r\n    \r\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve KYC\r\n  approveKYC: async (farmerId, approvalData) => {\r\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject KYC\r\n  rejectKYC: async (farmerId, rejectionData) => {\r\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\r\n      reason: rejectionData.reason || 'KYC rejected'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Refer back KYC\r\n  referBackKYC: async (farmerId, referBackData) => {\r\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\r\n      reason: referBackData.reason || 'KYC referred back'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC status\r\n  getKYCStatus: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC documents\r\n  getKYCDocuments: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardAPI = {\r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get admin dashboard data\r\n  getAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get super admin dashboard data\r\n  getSuperAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/super-admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee dashboard data\r\n  getEmployeeDashboardData: async (employeeId) => {\r\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get recent activity\r\n  getRecentActivity: async () => {\r\n    const response = await api.get('/dashboard/recent-activity');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Main API service object (for backward compatibility)\r\nexport const apiService = {\r\n  // Authentication\r\n  login: authAPI.login,\r\n  getProfile: authAPI.getProfile,\r\n  register: authAPI.register,\r\n  sendOTP: authAPI.sendOTP,\r\n  verifyOTP: authAPI.verifyOTP,\r\n  resendOTP: authAPI.resendOTP,\r\n  forgotPassword: authAPI.forgotPassword,\r\n  forgotUserId: authAPI.forgotUserId,\r\n  resetPassword: authAPI.resetPassword,\r\n  changePassword: authAPI.changePassword,\r\n  changeUserId: authAPI.changeUserId,\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  // User management\r\n  getAllUsers: superAdminAPI.getAllUsers,\r\n  getUserById: superAdminAPI.getUserById,\r\n  updateUser: superAdminAPI.updateUser,\r\n  deleteUser: superAdminAPI.deleteUser,\r\n  forcePasswordChange: superAdminAPI.forcePasswordChange,\r\n\r\n  // Farmer management\r\n  createFarmer: farmersAPI.createFarmer,\r\n  getFarmerById: farmersAPI.getFarmerById,\r\n  getAllFarmers: farmersAPI.getAllFarmers,\r\n  updateFarmer: farmersAPI.updateFarmer,\r\n  deleteFarmer: farmersAPI.deleteFarmer,\r\n  getAddressByPincode: authAPI.getAddressByPincode,\r\n  getFarmerDashboardData: async (email) => {\r\n    try {\r\n      const response = await api.get(`/farmers/dashboard/by-email?email=${email}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.warn('Farmer dashboard endpoint not available, trying alternative:', error);\r\n      // Try alternative endpoint\r\n      try {\r\n        const response = await api.get(`/farmers/by-email?email=${email}`);\r\n        return response.data;\r\n      } catch (altError) {\r\n        console.warn('Alternative farmer endpoint also failed:', altError);\r\n        throw error; // Re-throw original error\r\n      }\r\n    }\r\n  },\r\n\r\n  // Employee management\r\n  createEmployee: employeesAPI.createEmployee,\r\n  getEmployeeById: employeesAPI.getEmployeeById,\r\n  getAllEmployees: employeesAPI.getAllEmployees,\r\n  updateEmployee: employeesAPI.updateEmployee,\r\n  deleteEmployee: employeesAPI.deleteEmployee,\r\n  assignFarmerToEmployee: adminAPI.assignFarmer,\r\n  getFarmersByEmployee: adminAPI.getFarmersByEmployee,\r\n  approveKyc: kycAPI.approveKYC,\r\n  referBackKyc: kycAPI.referBackKYC,\r\n  rejectKyc: kycAPI.rejectKYC,\r\n\r\n  // Dashboard\r\n  getDashboardStats: dashboardAPI.getDashboardStats,\r\n  getRecentActivity: dashboardAPI.getRecentActivity,\r\n  getFarmerStats: farmersAPI.getFarmerStats,\r\n  getEmployeeStats: employeesAPI.getEmployeeStats,\r\n  getKycStats: kycAPI.getKYCStatus,\r\n\r\n  // Bulk Operations\r\n  bulkImport: async (type, formData) => {\r\n    const response = await api.post(`/bulk/import/${type}`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  bulkExport: async (type, filters) => {\r\n    const response = await api.post(`/bulk/export/${type}`, filters, {\r\n      responseType: 'blob',\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  downloadTemplate: async (type) => {\r\n    const response = await api.get(`/bulk/template/${type}`, {\r\n      responseType: 'blob',\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getImportStatus: async (importId) => {\r\n    const response = await api.get(`/bulk/import/status/${importId}`);\r\n    return response.data;\r\n  },\r\n\r\n  getImportHistory: async (userEmail) => {\r\n    const response = await api.get(`/bulk/import/history?userEmail=${userEmail}`);\r\n    return response.data;\r\n  },\r\n\r\n  bulkAssignFarmersToEmployee: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/bulk/assign/farmers-to-employee', null, {\r\n      params: {\r\n        farmerIds: farmerIds.join(','),\r\n        employeeId,\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // New: assign by farmer names and employee email\r\n  bulkAssignFarmersByNames: async (farmerNames, employeeEmail) => {\r\n    const response = await api.post('/bulk/assign/farmers-by-names', {\r\n      farmerNames,\r\n      employeeEmail,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  bulkAssignFarmersByLocation: async (location, employee) => {\r\n    const params = { location };\r\n    if (typeof employee === 'string') params.employeeEmail = employee;\r\n    else if (employee != null) params.employeeId = employee;\r\n    const response = await api.post('/bulk/assign/farmers-by-location', null, { params });\r\n    return response.data;\r\n  },\r\n\r\n  bulkAssignFarmersRoundRobin: async (farmerIds) => {\r\n    const response = await api.post('/bulk/assign/farmers-round-robin', null, {\r\n      params: {\r\n        farmerIds: farmerIds.join(','),\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
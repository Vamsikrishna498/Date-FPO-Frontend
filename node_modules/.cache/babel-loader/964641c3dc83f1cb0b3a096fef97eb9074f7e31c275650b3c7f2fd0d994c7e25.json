{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n  timeout: 30000,\n  // Increased from 10000 to 30000 (30 seconds)\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API calls\nexport const authAPI = {\n  // Login\n  login: async credentials => {\n    // Backend expects payload: { userName, password }\n    const payload = {\n      userName: credentials.userName || credentials.username || credentials.email,\n      password: credentials.password\n    };\n    const response = await api.post('/auth/login', payload);\n    return response.data;\n  },\n  // Get user profile\n  getProfile: async () => {\n    // Preferred profile endpoint, then fallbacks\n    try {\n      const res = await api.get('/user/profile');\n      return res.data;\n    } catch (e0) {\n      try {\n        const res = await api.get('/auth/me');\n        return res.data;\n      } catch (e1) {\n        try {\n          const res = await api.get('/auth/profile');\n          return res.data;\n        } catch (e2) {\n          const res = await api.get('/auth/users/profile');\n          return res.data;\n        }\n      }\n    }\n  },\n  // Register user\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  // Send OTP\n  sendOTP: async email => {\n    try {\n      const response = await api.post('/auth/send-otp', {\n        emailOrPhone: email\n      }, {\n        timeout: 45000 // 45 seconds for OTP operations\n      });\n      return response.data;\n    } catch (error) {\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n        throw new Error('OTP request timed out. Please check your internet connection and try again.');\n      }\n      throw error;\n    }\n  },\n  // Verify OTP\n  verifyOTP: async otpData => {\n    try {\n      const response = await api.post('/auth/verify-otp', {\n        emailOrPhone: otpData.email,\n        otp: otpData.otp\n      }, {\n        timeout: 30000 // 30 seconds for OTP verification\n      });\n      return response.data;\n    } catch (error) {\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n        throw new Error('OTP verification timed out. Please try again.');\n      }\n      throw error;\n    }\n  },\n  // Resend OTP\n  resendOTP: async email => {\n    try {\n      const response = await api.post('/auth/resend-otp', {\n        emailOrPhone: email\n      }, {\n        timeout: 45000 // 45 seconds for OTP operations\n      });\n      return response.data;\n    } catch (error) {\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n        throw new Error('OTP resend timed out. Please check your internet connection and try again.');\n      }\n      throw error;\n    }\n  },\n  // Forgot password\n  forgotPassword: async emailOrPhone => {\n    const response = await api.post('/auth/forgot-password', {\n      emailOrPhone\n    });\n    return response.data;\n  },\n  // Forgot user ID\n  forgotUserId: async emailOrPhone => {\n    const response = await api.post('/auth/forgot-user-id', {\n      emailOrPhone\n    });\n    return response.data;\n  },\n  // Reset password\n  resetPassword: async resetData => {\n    const response = await api.post('/auth/reset-password', resetData);\n    return response.data;\n  },\n  // Change password\n  changePassword: async passwordData => {\n    const response = await api.post('/auth/change-password', passwordData);\n    return response.data;\n  },\n  // Change user ID\n  changeUserId: async userIdData => {\n    const response = await api.post('/auth/change-user-id', userIdData);\n    return response.data;\n  },\n  // Get countries\n  getCountries: async () => {\n    const response = await api.get('/auth/countries');\n    return response.data;\n  },\n  // Get states\n  getStates: async countryId => {\n    const response = await api.post('/auth/states', {\n      countryId\n    });\n    return response.data;\n  },\n  // Get address by pincode\n  getAddressByPincode: async pincode => {\n    const response = await api.get(`/auth/pincode/${pincode}`);\n    return response.data;\n  }\n};\n\n// Admin API calls\nexport const adminAPI = {\n  // Get pending user registrations\n  getPendingRegistrations: async () => {\n    const response = await api.get('/admin/pending-registrations');\n    return response.data;\n  },\n  // Get approved users\n  getApprovedUsers: async () => {\n    const response = await api.get('/admin/approved-users');\n    return response.data;\n  },\n  // Get all registrations (Admin equivalent to SuperAdmin registration-list)\n  getRegistrationList: async (filters = {}) => {\n    const response = await api.get('/admin/registration-list', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get registration list by status\n  getRegistrationListByStatus: async status => {\n    const response = await api.get('/admin/registration-list/filter', {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  },\n  // Search registrations\n  searchRegistrations: async query => {\n    const response = await api.get('/admin/registration-list/search', {\n      params: {\n        query\n      }\n    });\n    return response.data;\n  },\n  // Approve user registration\n  approveUser: async (userId, role) => {\n    const response = await api.put(`/admin/users/${userId}/approve`, {\n      role\n    });\n    return response.data;\n  },\n  // Reject user registration\n  rejectUser: async (userId, reason) => {\n    const response = await api.put(`/admin/users/${userId}/reject`, {\n      reason\n    });\n    return response.data;\n  },\n  // Get all farmers\n  getAllFarmers: async () => {\n    const response = await api.get('/admin/farmers');\n    return response.data;\n  },\n  // Get all employees\n  getAllEmployees: async () => {\n    const response = await api.get('/admin/employees');\n    return response.data;\n  },\n  // Get farmers with KYC status\n  getFarmersWithKycStatus: async () => {\n    const response = await api.get('/admin/farmers-with-kyc');\n    return response.data;\n  },\n  // Get farmers with KYC (alias for compatibility)\n  getFarmersWithKyc: async () => {\n    const response = await api.get('/admin/farmers-with-kyc');\n    return response.data;\n  },\n  // Get employees with stats\n  getEmployeesWithStats: async () => {\n    const response = await api.get('/admin/employees-with-stats');\n    return response.data;\n  },\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/admin/dashboard-stats');\n    return response.data;\n  },\n  // Get todo list\n  getTodoList: async () => {\n    const response = await api.get('/admin/todo-list');\n    return response.data;\n  },\n  // Get enhanced todo list\n  getEnhancedTodoList: async () => {\n    const response = await api.get('/admin/enhanced-todo-list');\n    return response.data;\n  },\n  // Assign farmer to employee\n  assignFarmerToEmployee: async (farmerId, employeeId) => {\n    const response = await api.post('/admin/assign-farmer', null, {\n      params: {\n        farmerId,\n        employeeId\n      }\n    });\n    return response.data;\n  },\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/admin/bulk-assign-farmers', {\n      farmerIds,\n      employeeId\n    });\n    return response.data;\n  },\n  // Get assignment history\n  getAssignmentHistory: async (filters = {}) => {\n    const response = await api.get('/admin/assignment-history', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get farmers by assignment status\n  getFarmersByAssignmentStatus: async assignmentStatus => {\n    const response = await api.get('/admin/farmers/by-assignment-status', {\n      params: {\n        assignmentStatus\n      }\n    });\n    return response.data;\n  },\n  // Filter farmers\n  filterFarmers: async (filters = {}) => {\n    const response = await api.get('/admin/farmers/filter', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get locations (states and districts)\n  getLocations: async () => {\n    const response = await api.get('/admin/locations');\n    return response.data;\n  },\n  // Get farmers by employee\n  getFarmersByEmployee: async employeeId => {\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n  // Get all registrations for admin\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/admin/registration-list', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get registration list by status for admin\n  getRegistrationListByStatus: async status => {\n    const response = await api.get('/admin/registration-list/filter', {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  },\n  // Search registrations\n  searchRegistrations: async query => {\n    const response = await api.get('/admin/registration-list/search', {\n      params: {\n        query\n      }\n    });\n    return response.data;\n  },\n  // Get employee by ID\n  getEmployeeById: async employeeId => {\n    const response = await api.get(`/admin/employees/${employeeId}`);\n    return response.data;\n  },\n  // Update employee\n  updateEmployee: async (employeeId, employeeData) => {\n    const response = await api.put(`/admin/employees/${employeeId}`, employeeData);\n    return response.data;\n  },\n  // Approve registration for admin (alternative method)\n  approveRegistration: async (registrationId, approvalData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\n    return response.data;\n  },\n  // Reject registration for admin (alternative method)\n  rejectRegistration: async (registrationId, rejectionData) => {\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\n    return response.data;\n  }\n};\n\n// Super Admin API calls\nexport const superAdminAPI = {\n  // Get all users (registrations)\n  getAllUsers: async () => {\n    const response = await api.get('/super-admin/registration-list');\n    return response.data;\n  },\n  // Get registration list with filters\n  getRegistrationList: async (filters = {}) => {\n    const response = await api.get('/super-admin/registration-list', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get registration list by status\n  getRegistrationListByStatus: async status => {\n    const response = await api.get('/super-admin/registration-list/filter', {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  },\n  // Search registrations\n  searchRegistrations: async query => {\n    const response = await api.get('/super-admin/registration-list/search', {\n      params: {\n        query\n      }\n    });\n    return response.data;\n  },\n  // Get pending registrations\n  getPendingRegistrations: async () => {\n    const response = await api.get('/super-admin/pending-registrations');\n    return response.data;\n  },\n  // Get approved users\n  getApprovedUsers: async () => {\n    const response = await api.get('/super-admin/approved-users');\n    return response.data;\n  },\n  // Get users by role\n  getUsersByRole: async role => {\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\n    return response.data;\n  },\n  // Get pending users by role\n  getPendingUsersByRole: async role => {\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\n    return response.data;\n  },\n  // Approve user\n  approveUser: async (userId, role) => {\n    try {\n      // Try multiple endpoint variations for compatibility\n      let response;\n      let lastError;\n\n      // Strategy 1: Try auth endpoint with PUT method\n      try {\n        console.log('🔄 Trying PUT /auth/users/' + userId + '/approve');\n        response = await api.put(`/auth/users/${userId}/approve`, {\n          role\n        });\n        console.log('✅ Success with PUT /auth/users/' + userId + '/approve');\n        return response.data;\n      } catch (error) {\n        var _error$response2;\n        lastError = error;\n        console.log('❌ Failed with PUT /auth/users/' + userId + '/approve:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status);\n      }\n\n      // Strategy 2: Try auth endpoint with POST method\n      try {\n        console.log('🔄 Trying POST /auth/users/' + userId + '/approve');\n        response = await api.post(`/auth/users/${userId}/approve`, {\n          role\n        });\n        console.log('✅ Success with POST /auth/users/' + userId + '/approve');\n        return response.data;\n      } catch (error) {\n        var _error$response3;\n        lastError = error;\n        console.log('❌ Failed with POST /auth/users/' + userId + '/approve:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status);\n      }\n\n      // Strategy 3: Try super-admin endpoint\n      try {\n        console.log('🔄 Trying PUT /super-admin/users/' + userId + '/approve');\n        response = await api.put(`/super-admin/users/${userId}/approve`, {\n          role\n        });\n        console.log('✅ Success with PUT /super-admin/users/' + userId + '/approve');\n        return response.data;\n      } catch (error) {\n        var _error$response4;\n        lastError = error;\n        console.log('❌ Failed with PUT /super-admin/users/' + userId + '/approve:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status);\n      }\n\n      // Strategy 4: Try registrations endpoint\n      try {\n        console.log('🔄 Trying POST /registrations/' + userId + '/approve');\n        response = await api.post(`/registrations/${userId}/approve`, {\n          approvedBy: 'Super Admin',\n          approvalNotes: `User approved with role: ${role}`,\n          role: role\n        });\n        console.log('✅ Success with POST /registrations/' + userId + '/approve');\n        return response.data;\n      } catch (error) {\n        var _error$response5;\n        lastError = error;\n        console.log('❌ Failed with POST /registrations/' + userId + '/approve:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status);\n      }\n\n      // Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\n      try {\n        console.log('🔄 Trying PUT /employees/' + userId + '/approve');\n        response = await api.put(`/employees/${userId}/approve`, {\n          role\n        });\n        console.log('✅ Success with PUT /employees/' + userId + '/approve');\n        return response.data;\n      } catch (error) {\n        var _error$response6;\n        lastError = error;\n        console.log('❌ Failed with PUT /employees/' + userId + '/approve:', (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status);\n      }\n\n      // Strategy 6: Try employee status update\n      try {\n        console.log('🔄 Trying PUT /employees/' + userId + '/status');\n        response = await api.put(`/employees/${userId}/status`, {\n          status: 'APPROVED',\n          role\n        });\n        console.log('✅ Success with PUT /employees/' + userId + '/status');\n        return response.data;\n      } catch (error) {\n        var _error$response7;\n        lastError = error;\n        console.log('❌ Failed with PUT /employees/' + userId + '/status:', (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status);\n      }\n\n      // Strategy 7: Try user status update\n      try {\n        console.log('🔄 Trying PUT /users/' + userId + '/status');\n        response = await api.put(`/users/${userId}/status`, {\n          status: 'APPROVED',\n          role\n        });\n        console.log('✅ Success with PUT /users/' + userId + '/status');\n        return response.data;\n      } catch (error) {\n        var _error$response8;\n        lastError = error;\n        console.log('❌ Failed with PUT /users/' + userId + '/status:', (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status);\n      }\n\n      // If all strategies fail, throw the last error\n      throw lastError;\n    } catch (error) {\n      var _error$response9;\n      console.error('❌ All approval strategies failed:', error);\n      console.error('❌ Error response:', (_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data);\n      throw error;\n    }\n  },\n  // Reject user (update status to REJECTED)\n  rejectUser: async (userId, reason) => {\n    try {\n      // Try multiple endpoint variations for compatibility\n      let response;\n      let lastError;\n\n      // Strategy 1: Try auth endpoint with PUT method\n      try {\n        console.log('🔄 Trying PUT /auth/users/' + userId + '/reject');\n        response = await api.put(`/auth/users/${userId}/reject`, {\n          reason\n        });\n        console.log('✅ Success with PUT /auth/users/' + userId + '/reject');\n        return response.data;\n      } catch (error) {\n        var _error$response0;\n        lastError = error;\n        console.log('❌ Failed with PUT /auth/users/' + userId + '/reject:', (_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.status);\n      }\n\n      // Strategy 2: Try auth endpoint with POST method\n      try {\n        console.log('🔄 Trying POST /auth/users/' + userId + '/reject');\n        response = await api.post(`/auth/users/${userId}/reject`, {\n          reason\n        });\n        console.log('✅ Success with POST /auth/users/' + userId + '/reject');\n        return response.data;\n      } catch (error) {\n        var _error$response1;\n        lastError = error;\n        console.log('❌ Failed with POST /auth/users/' + userId + '/reject:', (_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.status);\n      }\n\n      // Strategy 3: Try super-admin endpoint\n      try {\n        console.log('🔄 Trying PUT /super-admin/users/' + userId + '/reject');\n        response = await api.put(`/super-admin/users/${userId}/reject`, {\n          reason\n        });\n        console.log('✅ Success with PUT /super-admin/users/' + userId + '/reject');\n        return response.data;\n      } catch (error) {\n        var _error$response10;\n        lastError = error;\n        console.log('❌ Failed with PUT /super-admin/users/' + userId + '/reject:', (_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.status);\n      }\n\n      // Strategy 4: Try registrations endpoint\n      try {\n        console.log('🔄 Trying POST /registrations/' + userId + '/reject');\n        response = await api.post(`/registrations/${userId}/reject`, {\n          rejectedBy: 'Super Admin',\n          rejectionReason: reason || 'Registration rejected by Super Admin'\n        });\n        console.log('✅ Success with POST /registrations/' + userId + '/reject');\n        return response.data;\n      } catch (error) {\n        var _error$response11;\n        lastError = error;\n        console.log('❌ Failed with POST /registrations/' + userId + '/reject:', (_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.status);\n      }\n\n      // Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\n      try {\n        console.log('🔄 Trying PUT /employees/' + userId + '/reject');\n        response = await api.put(`/employees/${userId}/reject`, {\n          reason\n        });\n        console.log('✅ Success with PUT /employees/' + userId + '/reject');\n        return response.data;\n      } catch (error) {\n        var _error$response12;\n        lastError = error;\n        console.log('❌ Failed with PUT /employees/' + userId + '/reject:', (_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.status);\n      }\n\n      // Strategy 6: Try employee status update\n      try {\n        console.log('🔄 Trying PUT /employees/' + userId + '/status');\n        response = await api.put(`/employees/${userId}/status`, {\n          status: 'REJECTED',\n          reason\n        });\n        console.log('✅ Success with PUT /employees/' + userId + '/status');\n        return response.data;\n      } catch (error) {\n        var _error$response13;\n        lastError = error;\n        console.log('❌ Failed with PUT /employees/' + userId + '/status:', (_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.status);\n      }\n\n      // Strategy 7: Try user status update\n      try {\n        console.log('🔄 Trying PUT /users/' + userId + '/status');\n        response = await api.put(`/users/${userId}/status`, {\n          status: 'REJECTED',\n          reason\n        });\n        console.log('✅ Success with PUT /users/' + userId + '/status');\n        return response.data;\n      } catch (error) {\n        var _error$response14;\n        lastError = error;\n        console.log('❌ Failed with PUT /users/' + userId + '/status:', (_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.status);\n      }\n\n      // If all strategies fail, throw the last error\n      throw lastError;\n    } catch (error) {\n      var _error$response15;\n      console.error('❌ All rejection strategies failed:', error);\n      console.error('❌ Error response:', (_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data);\n      throw error;\n    }\n  },\n  // Delete user\n  deleteUser: async userId => {\n    const response = await api.delete(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n  // Update user\n  updateUser: async (userId, userData) => {\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\n    return response.data;\n  },\n  // Update user status\n  updateUserStatus: async (userId, status) => {\n    const response = await api.put(`/auth/users/${userId}/status`, {\n      status\n    });\n    return response.data;\n  },\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    const response = await api.get('/public/dashboard/stats');\n    return response.data;\n  },\n  // Bulk assign farmers to employee\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\n    const response = await api.post('/super-admin/bulk-assign-farmers', {\n      farmerIds,\n      employeeId\n    });\n    return response.data;\n  },\n  // Single assign farmer to employee (fallback)\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post('/super-admin/assign-farmer', null, {\n      params: {\n        farmerId,\n        employeeId\n      }\n    });\n    return response.data;\n  },\n  // Get employee by ID\n  getEmployeeById: async employeeId => {\n    const response = await api.get(`/super-admin/employees/${employeeId}`);\n    return response.data;\n  },\n  // Update employee\n  updateEmployee: async (employeeId, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${employeeId}`, employeeData);\n    return response.data;\n  },\n  // Get user by ID\n  getUserById: async userId => {\n    const response = await api.get(`/super-admin/users/${userId}`);\n    return response.data;\n  },\n  // Force password change\n  forcePasswordChange: async userId => {\n    const response = await api.put(`/super-admin/users/${userId}/force-password-change`);\n    return response.data;\n  }\n};\n\n// Farmers API calls\nexport const farmersAPI = {\n  // Get all farmers\n  getAllFarmers: async (filters = {}) => {\n    const response = await api.get('/super-admin/farmers', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get farmer by ID\n  getFarmerById: async id => {\n    const response = await api.get(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n  // Create farmer (supports files)\n  createFarmer: async farmerData => {\n    // Use the /api/farmers endpoint which supports multipart/form-data\n    const formData = new FormData();\n\n    // Extract file fields - check all possible file field names\n    const photo = farmerData.photo;\n    const passbookPhoto = farmerData.passbookFile || farmerData.passbookPhoto;\n    const aadhaar = farmerData.documentFileName; // Map documentFileName to aadhaar\n    const soilTestCertificate = farmerData.soilTestCertificate || farmerData.currentSoilTestCertificateFileName;\n    console.log('🔍 File fields found:');\n    console.log('  - photo:', photo);\n    console.log('  - passbookPhoto:', passbookPhoto);\n    console.log('  - aadhaar:', aadhaar);\n    console.log('  - soilTestCertificate:', soilTestCertificate);\n\n    // Create farmerDto object without file fields and fix field mappings\n    const farmerDto = {\n      ...farmerData\n    };\n\n    // Remove file fields and any other non-serializable objects\n    delete farmerDto.photo;\n    delete farmerDto.passbookPhoto;\n    delete farmerDto.passbookFile; // Also remove passbookFile\n    delete farmerDto.documentFileName;\n    delete farmerDto.soilTestCertificate;\n    delete farmerDto.currentSoilTestCertificateFileName;\n\n    // Remove any other potential File objects or complex objects\n    Object.keys(farmerDto).forEach(key => {\n      if (farmerDto[key] instanceof File || farmerDto[key] instanceof Blob) {\n        delete farmerDto[key];\n      }\n    });\n\n    // Fix field name mappings\n    if (farmerDto.alternativeNumber) {\n      farmerDto.alternativeContactNumber = farmerDto.alternativeNumber;\n      delete farmerDto.alternativeNumber;\n    }\n\n    // Ensure required fields have default values if missing\n    if (!farmerDto.salutation) farmerDto.salutation = 'Mr';\n    if (!farmerDto.lastName) farmerDto.lastName = farmerDto.firstName || 'Unknown';\n    if (!farmerDto.dateOfBirth) farmerDto.dateOfBirth = '1990-01-01';\n    if (!farmerDto.gender) farmerDto.gender = 'Male';\n    if (!farmerDto.nationality) farmerDto.nationality = 'Indian';\n    if (!farmerDto.country) farmerDto.country = 'India';\n\n    // Log the final farmerDto object for debugging\n    console.log('🔍 Final farmerDto object (after cleanup):', farmerDto);\n    console.log('🔍 Required fields check:');\n    console.log('  - salutation:', farmerDto.salutation);\n    console.log('  - firstName:', farmerDto.firstName);\n    console.log('  - lastName:', farmerDto.lastName);\n    console.log('  - dateOfBirth:', farmerDto.dateOfBirth);\n    console.log('  - gender:', farmerDto.gender);\n    console.log('  - nationality:', farmerDto.nationality);\n    console.log('  - country:', farmerDto.country);\n\n    // Ensure contact numbers match pattern (10 digits)\n    if (farmerDto.contactNumber && !/^\\d{10}$/.test(farmerDto.contactNumber)) {\n      console.warn('⚠️ Contact number must be 10 digits:', farmerDto.contactNumber);\n    }\n    if (farmerDto.alternativeContactNumber && !/^\\d{10}$/.test(farmerDto.alternativeContactNumber)) {\n      console.warn('⚠️ Alternative contact number must be 10 digits:', farmerDto.alternativeContactNumber);\n    }\n\n    // Ensure pincode is 6 digits\n    if (farmerDto.pincode && !/^\\d{6}$/.test(farmerDto.pincode)) {\n      console.warn('⚠️ Pincode must be 6 digits:', farmerDto.pincode);\n    }\n\n    // Add farmerDto as JSON string\n    const farmerDtoJson = JSON.stringify(farmerDto);\n    console.log('🔍 farmerDto JSON being sent:', farmerDtoJson);\n    console.log('🔍 farmerDto object before JSON.stringify:', farmerDto);\n    formData.append('farmerDto', farmerDtoJson);\n\n    // Add files if they exist\n    if (photo instanceof File) {\n      formData.append('photo', photo);\n    }\n    if (passbookPhoto instanceof File) {\n      formData.append('passbookPhoto', passbookPhoto);\n    }\n    if (aadhaar instanceof File) {\n      formData.append('aadhaar', aadhaar);\n    }\n    if (soilTestCertificate instanceof File) {\n      formData.append('soilTestCertificate', soilTestCertificate);\n    }\n    console.log('🔍 Sending to /api/farmers with multipart data');\n    try {\n      const response = await api.post('/farmers', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response16, _error$response17;\n      console.error('❌ Server error details:', (_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data);\n      if (((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.status) === 500) {\n        var _error$response18, _error$response18$dat;\n        throw new Error(`Server error: ${((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : (_error$response18$dat = _error$response18.data) === null || _error$response18$dat === void 0 ? void 0 : _error$response18$dat.message) || 'Internal server error. Please check all required fields.'}`);\n      }\n      throw error;\n    }\n  },\n  // Update farmer\n  updateFarmer: async (id, farmerData) => {\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\n    return response.data;\n  },\n  // Delete farmer\n  deleteFarmer: async id => {\n    const response = await api.delete(`/super-admin/farmers/${id}`);\n    return response.data;\n  },\n  // Assign farmer to employee\n  assignFarmer: async (farmerId, employeeId) => {\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, {\n      employeeId\n    });\n    return response.data;\n  },\n  // Get farmer statistics\n  getFarmerStats: async () => {\n    const response = await api.get('/super-admin/farmers/stats');\n    return response.data;\n  }\n};\n\n// Employees API calls (for Super Admin and Admin)\nexport const employeesAPI = {\n  // Get all employees\n  getAllEmployees: async (filters = {}) => {\n    const response = await api.get('/super-admin/employees', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get employee by ID\n  getEmployeeById: async id => {\n    const response = await api.get(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n  // Create employee\n  createEmployee: async employeeData => {\n    const response = await api.post('/super-admin/employees', employeeData);\n    return response.data;\n  },\n  // Update employee\n  updateEmployee: async (id, employeeData) => {\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\n    return response.data;\n  },\n  // Delete employee\n  deleteEmployee: async id => {\n    const response = await api.delete(`/super-admin/employees/${id}`);\n    return response.data;\n  },\n  // Get assigned farmers for employee\n  getAssignedFarmers: async employeeId => {\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\n    return response.data;\n  },\n  // Get employee statistics\n  getEmployeeStats: async () => {\n    const response = await api.get('/super-admin/employees/stats');\n    return response.data;\n  }\n};\n\n// Employee-specific API calls (for Employee role)\nexport const employeeAPI = {\n  // Get assigned farmers for current employee\n  getAssignedFarmers: async employeeId => {\n    try {\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\n      const response = await api.get('/employees/dashboard/assigned-farmers');\n      console.log('✅ Success with dashboard endpoint');\n      return response.data;\n    } catch (error) {\n      console.error('❌ Failed to fetch assigned farmers:', error);\n      throw error;\n    }\n  },\n  // Get employee profile\n  getProfile: async () => {\n    const response = await api.get('/employees/profile');\n    return response.data;\n  },\n  // Update employee profile\n  updateProfile: async profileData => {\n    const response = await api.put('/employees/profile', profileData);\n    return response.data;\n  },\n  // Get employee statistics\n  getStats: async () => {\n    const response = await api.get('/employees/stats');\n    return response.data;\n  }\n};\n\n// Registrations API calls\nexport const registrationsAPI = {\n  // Get all registrations\n  getAllRegistrations: async (filters = {}) => {\n    const response = await api.get('/registrations', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get registration by ID\n  getRegistrationById: async id => {\n    const response = await api.get(`/registrations/${id}`);\n    return response.data;\n  },\n  // Approve registration\n  approveRegistration: async (id, approvalData) => {\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\n    return response.data;\n  },\n  // Reject registration\n  rejectRegistration: async (id, rejectionData) => {\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\n    return response.data;\n  },\n  // Get registration statistics\n  getRegistrationStats: async () => {\n    const response = await api.get('/registrations/stats');\n    return response.data;\n  }\n};\n\n// KYC API calls\nexport const kycAPI = {\n  // Upload KYC documents\n  uploadDocuments: async (farmerId, documents) => {\n    const formData = new FormData();\n    Object.keys(documents).forEach(key => {\n      if (documents[key]) {\n        formData.append(key, documents[key]);\n      }\n    });\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Approve KYC\n  approveKYC: async (farmerId, approvalData) => {\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\n    return response.data;\n  },\n  // Reject KYC\n  rejectKYC: async (farmerId, rejectionData) => {\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\n      reason: rejectionData.reason || 'KYC rejected'\n    });\n    return response.data;\n  },\n  // Refer back KYC\n  referBackKYC: async (farmerId, referBackData) => {\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\n      reason: referBackData.reason || 'KYC referred back'\n    });\n    return response.data;\n  },\n  // Get KYC status\n  getKYCStatus: async farmerId => {\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\n    return response.data;\n  },\n  // Get KYC documents\n  getKYCDocuments: async farmerId => {\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\n    return response.data;\n  }\n};\n\n// Dashboard API calls\nexport const dashboardAPI = {\n  // Get dashboard statistics\n  getDashboardStats: async () => {\n    const response = await api.get('/dashboard/stats');\n    return response.data;\n  },\n  // Get admin dashboard data\n  getAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/admin');\n    return response.data;\n  },\n  // Get super admin dashboard data\n  getSuperAdminDashboardData: async () => {\n    const response = await api.get('/dashboard/super-admin');\n    return response.data;\n  },\n  // Get employee dashboard data\n  getEmployeeDashboardData: async employeeId => {\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\n    return response.data;\n  },\n  // Get recent activity\n  getRecentActivity: async () => {\n    const response = await api.get('/dashboard/recent-activity');\n    return response.data;\n  }\n};\n\n// Main API service object (for backward compatibility)\nexport const apiService = {\n  // Authentication\n  login: authAPI.login,\n  getProfile: authAPI.getProfile,\n  register: authAPI.register,\n  sendOTP: authAPI.sendOTP,\n  verifyOTP: authAPI.verifyOTP,\n  resendOTP: authAPI.resendOTP,\n  forgotPassword: authAPI.forgotPassword,\n  forgotUserId: authAPI.forgotUserId,\n  resetPassword: authAPI.resetPassword,\n  changePassword: authAPI.changePassword,\n  changeUserId: authAPI.changeUserId,\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  // User management\n  getAllUsers: superAdminAPI.getAllUsers,\n  getUserById: superAdminAPI.getUserById,\n  updateUser: superAdminAPI.updateUser,\n  deleteUser: superAdminAPI.deleteUser,\n  forcePasswordChange: superAdminAPI.forcePasswordChange,\n  // Farmer management\n  createFarmer: farmersAPI.createFarmer,\n  getFarmerById: farmersAPI.getFarmerById,\n  getAllFarmers: farmersAPI.getAllFarmers,\n  updateFarmer: farmersAPI.updateFarmer,\n  deleteFarmer: farmersAPI.deleteFarmer,\n  getAddressByPincode: authAPI.getAddressByPincode,\n  getFarmerDashboardData: async email => {\n    try {\n      const response = await api.get(`/farmers/dashboard/by-email?email=${email}`);\n      return response.data;\n    } catch (error) {\n      console.warn('Farmer dashboard endpoint not available, trying alternative:', error);\n      // Try alternative endpoint\n      try {\n        const response = await api.get(`/farmers/by-email?email=${email}`);\n        return response.data;\n      } catch (altError) {\n        console.warn('Alternative farmer endpoint also failed:', altError);\n        throw error; // Re-throw original error\n      }\n    }\n  },\n  // Employee management\n  createEmployee: employeesAPI.createEmployee,\n  getEmployeeById: employeesAPI.getEmployeeById,\n  getAllEmployees: employeesAPI.getAllEmployees,\n  updateEmployee: employeesAPI.updateEmployee,\n  deleteEmployee: employeesAPI.deleteEmployee,\n  assignFarmerToEmployee: adminAPI.assignFarmer,\n  getFarmersByEmployee: adminAPI.getFarmersByEmployee,\n  approveKyc: kycAPI.approveKYC,\n  referBackKyc: kycAPI.referBackKYC,\n  rejectKyc: kycAPI.rejectKYC,\n  // Dashboard\n  getDashboardStats: dashboardAPI.getDashboardStats,\n  getRecentActivity: dashboardAPI.getRecentActivity,\n  getFarmerStats: farmersAPI.getFarmerStats,\n  getEmployeeStats: employeesAPI.getEmployeeStats,\n  getKycStats: kycAPI.getKYCStatus,\n  // Bulk Operations\n  bulkImport: async (type, formData) => {\n    const response = await api.post(`/bulk/import/${type}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  bulkExport: async (type, filters) => {\n    const response = await api.post(`/bulk/export/${type}`, filters, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  downloadTemplate: async type => {\n    const response = await api.get(`/bulk/template/${type}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  getImportStatus: async importId => {\n    const response = await api.get(`/bulk/import/status/${importId}`);\n    return response.data;\n  },\n  getImportHistory: async userEmail => {\n    const response = await api.get(`/bulk/import/history?userEmail=${userEmail}`);\n    return response.data;\n  },\n  bulkAssignFarmersToEmployee: async (farmerIds, employeeId) => {\n    const response = await api.post('/bulk/assign/farmers-to-employee', null, {\n      params: {\n        farmerIds: farmerIds.join(','),\n        employeeId\n      }\n    });\n    return response.data;\n  },\n  // New: assign by farmer names and employee email\n  bulkAssignFarmersByNames: async (farmerNames, employeeEmail) => {\n    const response = await api.post('/bulk/assign/farmers-by-names', {\n      farmerNames,\n      employeeEmail\n    });\n    return response.data;\n  },\n  bulkAssignFarmersByLocation: async (location, employee) => {\n    const params = {\n      location\n    };\n    if (typeof employee === 'string') params.employeeEmail = employee;else if (employee != null) params.employeeId = employee;\n    const response = await api.post('/bulk/assign/farmers-by-location', null, {\n      params\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","payload","userName","username","email","password","post","data","getProfile","res","get","e0","e1","e2","register","userData","sendOTP","emailOrPhone","code","message","includes","Error","verifyOTP","otpData","otp","resendOTP","forgotPassword","forgotUserId","resetPassword","resetData","changePassword","passwordData","changeUserId","userIdData","getCountries","getStates","countryId","getAddressByPincode","pincode","adminAPI","getPendingRegistrations","getApprovedUsers","getRegistrationList","filters","params","getRegistrationListByStatus","searchRegistrations","query","approveUser","userId","role","put","rejectUser","reason","getAllFarmers","getAllEmployees","getFarmersWithKycStatus","getFarmersWithKyc","getEmployeesWithStats","getDashboardStats","getTodoList","getEnhancedTodoList","assignFarmerToEmployee","farmerId","employeeId","bulkAssignFarmers","farmerIds","getAssignmentHistory","getFarmersByAssignmentStatus","assignmentStatus","filterFarmers","getLocations","getFarmersByEmployee","getAllRegistrations","getEmployeeById","updateEmployee","employeeData","approveRegistration","registrationId","approvalData","rejectRegistration","rejectionData","superAdminAPI","getAllUsers","getUsersByRole","getPendingUsersByRole","lastError","console","log","_error$response2","_error$response3","_error$response4","approvedBy","approvalNotes","_error$response5","_error$response6","_error$response7","_error$response8","_error$response9","_error$response0","_error$response1","_error$response10","rejectedBy","rejectionReason","_error$response11","_error$response12","_error$response13","_error$response14","_error$response15","deleteUser","delete","updateUser","updateUserStatus","assignFarmer","getUserById","forcePasswordChange","farmersAPI","getFarmerById","id","createFarmer","farmerData","formData","FormData","photo","passbookPhoto","passbookFile","aadhaar","documentFileName","soilTestCertificate","currentSoilTestCertificateFileName","farmerDto","Object","keys","forEach","key","File","Blob","alternativeNumber","alternativeContactNumber","salutation","lastName","firstName","dateOfBirth","gender","nationality","country","contactNumber","test","warn","farmerDtoJson","JSON","stringify","append","_error$response16","_error$response17","_error$response18","_error$response18$dat","updateFarmer","deleteFarmer","getFarmerStats","employeesAPI","createEmployee","deleteEmployee","getAssignedFarmers","getEmployeeStats","employeeAPI","updateProfile","profileData","getStats","registrationsAPI","getRegistrationById","getRegistrationStats","kycAPI","uploadDocuments","documents","approveKYC","rejectKYC","referBackKYC","referBackData","getKYCStatus","getKYCDocuments","dashboardAPI","getAdminDashboardData","getSuperAdminDashboardData","getEmployeeDashboardData","getRecentActivity","apiService","logout","getFarmerDashboardData","altError","approveKyc","referBackKyc","rejectKyc","getKycStats","bulkImport","type","bulkExport","responseType","downloadTemplate","getImportStatus","importId","getImportHistory","userEmail","bulkAssignFarmersToEmployee","join","bulkAssignFarmersByNames","farmerNames","employeeEmail","bulkAssignFarmersByLocation","employee"],"sources":["C:/karthik cc/date-frontend/src/api/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\r\n  timeout: 30000, // Increased from 10000 to 30000 (30 seconds)\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authAPI = {\r\n  // Login\r\n  login: async (credentials) => {\r\n    // Backend expects payload: { userName, password }\r\n    const payload = {\r\n      userName: credentials.userName || credentials.username || credentials.email,\r\n      password: credentials.password,\r\n    };\r\n    const response = await api.post('/auth/login', payload);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user profile\r\n  getProfile: async () => {\r\n    // Preferred profile endpoint, then fallbacks\r\n    try {\r\n      const res = await api.get('/user/profile');\r\n      return res.data;\r\n    } catch (e0) {\r\n      try {\r\n        const res = await api.get('/auth/me');\r\n        return res.data;\r\n      } catch (e1) {\r\n        try {\r\n          const res = await api.get('/auth/profile');\r\n          return res.data;\r\n        } catch (e2) {\r\n          const res = await api.get('/auth/users/profile');\r\n          return res.data;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  // Register user\r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send OTP\r\n  sendOTP: async (email) => {\r\n    try {\r\n      const response = await api.post('/auth/send-otp', { emailOrPhone: email }, {\r\n        timeout: 45000 // 45 seconds for OTP operations\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n        throw new Error('OTP request timed out. Please check your internet connection and try again.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Verify OTP\r\n  verifyOTP: async (otpData) => {\r\n    try {\r\n      const response = await api.post('/auth/verify-otp', { \r\n        emailOrPhone: otpData.email, \r\n        otp: otpData.otp \r\n      }, {\r\n        timeout: 30000 // 30 seconds for OTP verification\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n        throw new Error('OTP verification timed out. Please try again.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOTP: async (email) => {\r\n    try {\r\n      const response = await api.post('/auth/resend-otp', { emailOrPhone: email }, {\r\n        timeout: 45000 // 45 seconds for OTP operations\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\r\n        throw new Error('OTP resend timed out. Please check your internet connection and try again.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-password', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Forgot user ID\r\n  forgotUserId: async (emailOrPhone) => {\r\n    const response = await api.post('/auth/forgot-user-id', { emailOrPhone });\r\n    return response.data;\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (resetData) => {\r\n    const response = await api.post('/auth/reset-password', resetData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await api.post('/auth/change-password', passwordData);\r\n    return response.data;\r\n  },\r\n\r\n  // Change user ID\r\n  changeUserId: async (userIdData) => {\r\n    const response = await api.post('/auth/change-user-id', userIdData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get countries\r\n  getCountries: async () => {\r\n    const response = await api.get('/auth/countries');\r\n    return response.data;\r\n  },\r\n\r\n  // Get states\r\n  getStates: async (countryId) => {\r\n    const response = await api.post('/auth/states', { countryId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get address by pincode\r\n  getAddressByPincode: async (pincode) => {\r\n    const response = await api.get(`/auth/pincode/${pincode}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Admin API calls\r\nexport const adminAPI = {\r\n  // Get pending user registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations (Admin equivalent to SuperAdmin registration-list)\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n  \r\n  // Approve user registration\r\n  approveUser: async (userId, role) => {\r\n    const response = await api.put(`/admin/users/${userId}/approve`, { role });\r\n    return response.data;\r\n  },\r\n  \r\n  // Reject user registration\r\n  rejectUser: async (userId, reason) => {\r\n    const response = await api.put(`/admin/users/${userId}/reject`, { reason });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get all farmers\r\n  getAllFarmers: async () => {\r\n    const response = await api.get('/admin/farmers');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get all employees\r\n  getAllEmployees: async () => {\r\n    const response = await api.get('/admin/employees');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get farmers with KYC status\r\n  getFarmersWithKycStatus: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get farmers with KYC (alias for compatibility)\r\n  getFarmersWithKyc: async () => {\r\n    const response = await api.get('/admin/farmers-with-kyc');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get employees with stats\r\n  getEmployeesWithStats: async () => {\r\n    const response = await api.get('/admin/employees-with-stats');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/admin/dashboard-stats');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get todo list\r\n  getTodoList: async () => {\r\n    const response = await api.get('/admin/todo-list');\r\n    return response.data;\r\n  },\r\n  \r\n  // Get enhanced todo list\r\n  getEnhancedTodoList: async () => {\r\n    const response = await api.get('/admin/enhanced-todo-list');\r\n    return response.data;\r\n  },\r\n  \r\n  // Assign farmer to employee\r\n  assignFarmerToEmployee: async (farmerId, employeeId) => {\r\n    const response = await api.post('/admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/admin/bulk-assign-farmers', { \r\n      farmerIds, employeeId \r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get assignment history\r\n  getAssignmentHistory: async (filters = {}) => {\r\n    const response = await api.get('/admin/assignment-history', { params: filters });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get farmers by assignment status\r\n  getFarmersByAssignmentStatus: async (assignmentStatus) => {\r\n    const response = await api.get('/admin/farmers/by-assignment-status', { \r\n      params: { assignmentStatus } \r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Filter farmers\r\n  filterFarmers: async (filters = {}) => {\r\n    const response = await api.get('/admin/farmers/filter', { params: filters });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get locations (states and districts)\r\n  getLocations: async () => {\r\n    const response = await api.get('/admin/locations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmers by employee\r\n  getFarmersByEmployee: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get all registrations for admin\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status for admin\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (employeeId) => {\r\n    const response = await api.get(`/admin/employees/${employeeId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (employeeId, employeeData) => {\r\n    const response = await api.put(`/admin/employees/${employeeId}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration for admin (alternative method)\r\n  approveRegistration: async (registrationId, approvalData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration for admin (alternative method)\r\n  rejectRegistration: async (registrationId, rejectionData) => {\r\n    const response = await api.post(`/admin/registrations/${registrationId}/reject`, rejectionData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Super Admin API calls\r\nexport const superAdminAPI = {\r\n  // Get all users (registrations)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/super-admin/registration-list');\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list with filters\r\n  getRegistrationList: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/registration-list', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration list by status\r\n  getRegistrationListByStatus: async (status) => {\r\n    const response = await api.get('/super-admin/registration-list/filter', { params: { status } });\r\n    return response.data;\r\n  },\r\n\r\n  // Search registrations\r\n  searchRegistrations: async (query) => {\r\n    const response = await api.get('/super-admin/registration-list/search', { params: { query } });\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending registrations\r\n  getPendingRegistrations: async () => {\r\n    const response = await api.get('/super-admin/pending-registrations');\r\n    return response.data;\r\n  },\r\n\r\n  // Get approved users\r\n  getApprovedUsers: async () => {\r\n    const response = await api.get('/super-admin/approved-users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get users by role\r\n  getUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get pending users by role\r\n  getPendingUsersByRole: async (role) => {\r\n    const response = await api.get(`/super-admin/pending-users/by-role/${role}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve user\r\n  approveUser: async (userId, role) => {\r\n    try {\r\n      // Try multiple endpoint variations for compatibility\r\n      let response;\r\n      let lastError;\r\n      \r\n      // Strategy 1: Try auth endpoint with PUT method\r\n      try {\r\n        console.log('🔄 Trying PUT /auth/users/' + userId + '/approve');\r\n        response = await api.put(`/auth/users/${userId}/approve`, { role });\r\n        console.log('✅ Success with PUT /auth/users/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /auth/users/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 2: Try auth endpoint with POST method\r\n      try {\r\n        console.log('🔄 Trying POST /auth/users/' + userId + '/approve');\r\n        response = await api.post(`/auth/users/${userId}/approve`, { role });\r\n        console.log('✅ Success with POST /auth/users/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /auth/users/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 3: Try super-admin endpoint\r\n      try {\r\n        console.log('🔄 Trying PUT /super-admin/users/' + userId + '/approve');\r\n        response = await api.put(`/super-admin/users/${userId}/approve`, { role });\r\n        console.log('✅ Success with PUT /super-admin/users/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /super-admin/users/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 4: Try registrations endpoint\r\n      try {\r\n        console.log('🔄 Trying POST /registrations/' + userId + '/approve');\r\n        response = await api.post(`/registrations/${userId}/approve`, { \r\n          approvedBy: 'Super Admin',\r\n          approvalNotes: `User approved with role: ${role}`,\r\n          role: role\r\n        });\r\n        console.log('✅ Success with POST /registrations/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /registrations/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/approve');\r\n        response = await api.put(`/employees/${userId}/approve`, { role });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/approve');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/approve:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 6: Try employee status update\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/status');\r\n        response = await api.put(`/employees/${userId}/status`, { status: 'APPROVED', role });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 7: Try user status update\r\n      try {\r\n        console.log('🔄 Trying PUT /users/' + userId + '/status');\r\n        response = await api.put(`/users/${userId}/status`, { status: 'APPROVED', role });\r\n        console.log('✅ Success with PUT /users/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /users/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // If all strategies fail, throw the last error\r\n      throw lastError;\r\n    } catch (error) {\r\n      console.error('❌ All approval strategies failed:', error);\r\n      console.error('❌ Error response:', error.response?.data);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Reject user (update status to REJECTED)\r\n  rejectUser: async (userId, reason) => {\r\n    try {\r\n      // Try multiple endpoint variations for compatibility\r\n      let response;\r\n      let lastError;\r\n      \r\n      // Strategy 1: Try auth endpoint with PUT method\r\n      try {\r\n        console.log('🔄 Trying PUT /auth/users/' + userId + '/reject');\r\n        response = await api.put(`/auth/users/${userId}/reject`, { reason });\r\n        console.log('✅ Success with PUT /auth/users/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /auth/users/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 2: Try auth endpoint with POST method\r\n      try {\r\n        console.log('🔄 Trying POST /auth/users/' + userId + '/reject');\r\n        response = await api.post(`/auth/users/${userId}/reject`, { reason });\r\n        console.log('✅ Success with POST /auth/users/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /auth/users/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 3: Try super-admin endpoint\r\n      try {\r\n        console.log('🔄 Trying PUT /super-admin/users/' + userId + '/reject');\r\n        response = await api.put(`/super-admin/users/${userId}/reject`, { reason });\r\n        console.log('✅ Success with PUT /super-admin/users/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /super-admin/users/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 4: Try registrations endpoint\r\n      try {\r\n        console.log('🔄 Trying POST /registrations/' + userId + '/reject');\r\n        response = await api.post(`/registrations/${userId}/reject`, { \r\n          rejectedBy: 'Super Admin',\r\n          rejectionReason: reason || 'Registration rejected by Super Admin'\r\n        });\r\n        console.log('✅ Success with POST /registrations/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with POST /registrations/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 5: Try employee-specific endpoints (based on Hibernate logs)\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/reject');\r\n        response = await api.put(`/employees/${userId}/reject`, { reason });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/reject');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/reject:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 6: Try employee status update\r\n      try {\r\n        console.log('🔄 Trying PUT /employees/' + userId + '/status');\r\n        response = await api.put(`/employees/${userId}/status`, { status: 'REJECTED', reason });\r\n        console.log('✅ Success with PUT /employees/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /employees/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // Strategy 7: Try user status update\r\n      try {\r\n        console.log('🔄 Trying PUT /users/' + userId + '/status');\r\n        response = await api.put(`/users/${userId}/status`, { status: 'REJECTED', reason });\r\n        console.log('✅ Success with PUT /users/' + userId + '/status');\r\n        return response.data;\r\n      } catch (error) {\r\n        lastError = error;\r\n        console.log('❌ Failed with PUT /users/' + userId + '/status:', error.response?.status);\r\n      }\r\n      \r\n      // If all strategies fail, throw the last error\r\n      throw lastError;\r\n    } catch (error) {\r\n      console.error('❌ All rejection strategies failed:', error);\r\n      console.error('❌ Error response:', error.response?.data);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete user\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/super-admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user status\r\n  updateUserStatus: async (userId, status) => {\r\n    const response = await api.put(`/auth/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/public/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Bulk assign farmers to employee\r\n  bulkAssignFarmers: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/super-admin/bulk-assign-farmers', { farmerIds, employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Single assign farmer to employee (fallback)\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post('/super-admin/assign-farmer', null, { \r\n      params: { farmerId, employeeId } \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (employeeId, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${employeeId}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user by ID\r\n  getUserById: async (userId) => {\r\n    const response = await api.get(`/super-admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Force password change\r\n  forcePasswordChange: async (userId) => {\r\n    const response = await api.put(`/super-admin/users/${userId}/force-password-change`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Farmers API calls\r\nexport const farmersAPI = {\r\n  // Get all farmers\r\n  getAllFarmers: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/farmers', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer by ID\r\n  getFarmerById: async (id) => {\r\n    const response = await api.get(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create farmer (supports files)\r\n  createFarmer: async (farmerData) => {\r\n    // Use the /api/farmers endpoint which supports multipart/form-data\r\n    const formData = new FormData();\r\n    \r\n    // Extract file fields - check all possible file field names\r\n    const photo = farmerData.photo;\r\n    const passbookPhoto = farmerData.passbookFile || farmerData.passbookPhoto;\r\n    const aadhaar = farmerData.documentFileName; // Map documentFileName to aadhaar\r\n    const soilTestCertificate = farmerData.soilTestCertificate || farmerData.currentSoilTestCertificateFileName;\r\n    \r\n    console.log('🔍 File fields found:');\r\n    console.log('  - photo:', photo);\r\n    console.log('  - passbookPhoto:', passbookPhoto);\r\n    console.log('  - aadhaar:', aadhaar);\r\n    console.log('  - soilTestCertificate:', soilTestCertificate);\r\n    \r\n    // Create farmerDto object without file fields and fix field mappings\r\n    const farmerDto = { ...farmerData };\r\n    \r\n    // Remove file fields and any other non-serializable objects\r\n    delete farmerDto.photo;\r\n    delete farmerDto.passbookPhoto;\r\n    delete farmerDto.passbookFile; // Also remove passbookFile\r\n    delete farmerDto.documentFileName;\r\n    delete farmerDto.soilTestCertificate;\r\n    delete farmerDto.currentSoilTestCertificateFileName;\r\n    \r\n    // Remove any other potential File objects or complex objects\r\n    Object.keys(farmerDto).forEach(key => {\r\n      if (farmerDto[key] instanceof File || farmerDto[key] instanceof Blob) {\r\n        delete farmerDto[key];\r\n      }\r\n    });\r\n    \r\n    // Fix field name mappings\r\n    if (farmerDto.alternativeNumber) {\r\n      farmerDto.alternativeContactNumber = farmerDto.alternativeNumber;\r\n      delete farmerDto.alternativeNumber;\r\n    }\r\n    \r\n    // Ensure required fields have default values if missing\r\n    if (!farmerDto.salutation) farmerDto.salutation = 'Mr';\r\n    if (!farmerDto.lastName) farmerDto.lastName = farmerDto.firstName || 'Unknown';\r\n    if (!farmerDto.dateOfBirth) farmerDto.dateOfBirth = '1990-01-01';\r\n    if (!farmerDto.gender) farmerDto.gender = 'Male';\r\n    if (!farmerDto.nationality) farmerDto.nationality = 'Indian';\r\n    if (!farmerDto.country) farmerDto.country = 'India';\r\n    \r\n    // Log the final farmerDto object for debugging\r\n    console.log('🔍 Final farmerDto object (after cleanup):', farmerDto);\r\n    console.log('🔍 Required fields check:');\r\n    console.log('  - salutation:', farmerDto.salutation);\r\n    console.log('  - firstName:', farmerDto.firstName);\r\n    console.log('  - lastName:', farmerDto.lastName);\r\n    console.log('  - dateOfBirth:', farmerDto.dateOfBirth);\r\n    console.log('  - gender:', farmerDto.gender);\r\n    console.log('  - nationality:', farmerDto.nationality);\r\n    console.log('  - country:', farmerDto.country);\r\n    \r\n    // Ensure contact numbers match pattern (10 digits)\r\n    if (farmerDto.contactNumber && !/^\\d{10}$/.test(farmerDto.contactNumber)) {\r\n      console.warn('⚠️ Contact number must be 10 digits:', farmerDto.contactNumber);\r\n    }\r\n    if (farmerDto.alternativeContactNumber && !/^\\d{10}$/.test(farmerDto.alternativeContactNumber)) {\r\n      console.warn('⚠️ Alternative contact number must be 10 digits:', farmerDto.alternativeContactNumber);\r\n    }\r\n    \r\n    // Ensure pincode is 6 digits\r\n    if (farmerDto.pincode && !/^\\d{6}$/.test(farmerDto.pincode)) {\r\n      console.warn('⚠️ Pincode must be 6 digits:', farmerDto.pincode);\r\n    }\r\n    \r\n    // Add farmerDto as JSON string\r\n    const farmerDtoJson = JSON.stringify(farmerDto);\r\n    console.log('🔍 farmerDto JSON being sent:', farmerDtoJson);\r\n    console.log('🔍 farmerDto object before JSON.stringify:', farmerDto);\r\n    formData.append('farmerDto', farmerDtoJson);\r\n    \r\n    // Add files if they exist\r\n    if (photo instanceof File) {\r\n      formData.append('photo', photo);\r\n    }\r\n    if (passbookPhoto instanceof File) {\r\n      formData.append('passbookPhoto', passbookPhoto);\r\n    }\r\n    if (aadhaar instanceof File) {\r\n      formData.append('aadhaar', aadhaar);\r\n    }\r\n    if (soilTestCertificate instanceof File) {\r\n      formData.append('soilTestCertificate', soilTestCertificate);\r\n    }\r\n    \r\n    console.log('🔍 Sending to /api/farmers with multipart data');\r\n    try {\r\n      const response = await api.post('/farmers', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Server error details:', error.response?.data);\r\n      if (error.response?.status === 500) {\r\n        throw new Error(`Server error: ${error.response?.data?.message || 'Internal server error. Please check all required fields.'}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update farmer\r\n  updateFarmer: async (id, farmerData) => {\r\n    const response = await api.put(`/super-admin/farmers/${id}`, farmerData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete farmer\r\n  deleteFarmer: async (id) => {\r\n    const response = await api.delete(`/super-admin/farmers/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Assign farmer to employee\r\n  assignFarmer: async (farmerId, employeeId) => {\r\n    const response = await api.post(`/super-admin/farmers/${farmerId}/assign`, { employeeId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get farmer statistics\r\n  getFarmerStats: async () => {\r\n    const response = await api.get('/super-admin/farmers/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n\r\n\r\n// Employees API calls (for Super Admin and Admin)\r\nexport const employeesAPI = {\r\n  // Get all employees\r\n  getAllEmployees: async (filters = {}) => {\r\n    const response = await api.get('/super-admin/employees', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee by ID\r\n  getEmployeeById: async (id) => {\r\n    const response = await api.get(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create employee\r\n  createEmployee: async (employeeData) => {\r\n    const response = await api.post('/super-admin/employees', employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee\r\n  updateEmployee: async (id, employeeData) => {\r\n    const response = await api.put(`/super-admin/employees/${id}`, employeeData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete employee\r\n  deleteEmployee: async (id) => {\r\n    const response = await api.delete(`/super-admin/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get assigned farmers for employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    const response = await api.get(`/super-admin/employees/${employeeId}/assigned-farmers`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getEmployeeStats: async () => {\r\n    const response = await api.get('/super-admin/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Employee-specific API calls (for Employee role)\r\nexport const employeeAPI = {\r\n  // Get assigned farmers for current employee\r\n  getAssignedFarmers: async (employeeId) => {\r\n    try {\r\n      console.log('🔄 Fetching assigned farmers from dashboard endpoint');\r\n      const response = await api.get('/employees/dashboard/assigned-farmers');\r\n      console.log('✅ Success with dashboard endpoint');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch assigned farmers:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get employee profile\r\n  getProfile: async () => {\r\n    const response = await api.get('/employees/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Update employee profile\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.put('/employees/profile', profileData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee statistics\r\n  getStats: async () => {\r\n    const response = await api.get('/employees/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Registrations API calls\r\nexport const registrationsAPI = {\r\n  // Get all registrations\r\n  getAllRegistrations: async (filters = {}) => {\r\n    const response = await api.get('/registrations', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration by ID\r\n  getRegistrationById: async (id) => {\r\n    const response = await api.get(`/registrations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Approve registration\r\n  approveRegistration: async (id, approvalData) => {\r\n    const response = await api.post(`/registrations/${id}/approve`, approvalData);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject registration\r\n  rejectRegistration: async (id, rejectionData) => {\r\n    const response = await api.post(`/registrations/${id}/reject`, rejectionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get registration statistics\r\n  getRegistrationStats: async () => {\r\n    const response = await api.get('/registrations/stats');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// KYC API calls\r\nexport const kycAPI = {\r\n  // Upload KYC documents\r\n  uploadDocuments: async (farmerId, documents) => {\r\n    const formData = new FormData();\r\n    Object.keys(documents).forEach(key => {\r\n      if (documents[key]) {\r\n        formData.append(key, documents[key]);\r\n      }\r\n    });\r\n    \r\n    const response = await api.post(`/employees/kyc/${farmerId}/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Approve KYC\r\n  approveKYC: async (farmerId, approvalData) => {\r\n    const response = await api.put(`/employees/kyc/approve/${farmerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Reject KYC\r\n  rejectKYC: async (farmerId, rejectionData) => {\r\n    const response = await api.put(`/employees/kyc/reject/${farmerId}`, {\r\n      reason: rejectionData.reason || 'KYC rejected'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Refer back KYC\r\n  referBackKYC: async (farmerId, referBackData) => {\r\n    const response = await api.put(`/employees/kyc/refer-back/${farmerId}`, {\r\n      reason: referBackData.reason || 'KYC referred back'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC status\r\n  getKYCStatus: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/status`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get KYC documents\r\n  getKYCDocuments: async (farmerId) => {\r\n    const response = await api.get(`/employees/kyc/${farmerId}/documents`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardAPI = {\r\n  // Get dashboard statistics\r\n  getDashboardStats: async () => {\r\n    const response = await api.get('/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Get admin dashboard data\r\n  getAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get super admin dashboard data\r\n  getSuperAdminDashboardData: async () => {\r\n    const response = await api.get('/dashboard/super-admin');\r\n    return response.data;\r\n  },\r\n\r\n  // Get employee dashboard data\r\n  getEmployeeDashboardData: async (employeeId) => {\r\n    const response = await api.get(`/dashboard/employee/${employeeId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get recent activity\r\n  getRecentActivity: async () => {\r\n    const response = await api.get('/dashboard/recent-activity');\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Main API service object (for backward compatibility)\r\nexport const apiService = {\r\n  // Authentication\r\n  login: authAPI.login,\r\n  getProfile: authAPI.getProfile,\r\n  register: authAPI.register,\r\n  sendOTP: authAPI.sendOTP,\r\n  verifyOTP: authAPI.verifyOTP,\r\n  resendOTP: authAPI.resendOTP,\r\n  forgotPassword: authAPI.forgotPassword,\r\n  forgotUserId: authAPI.forgotUserId,\r\n  resetPassword: authAPI.resetPassword,\r\n  changePassword: authAPI.changePassword,\r\n  changeUserId: authAPI.changeUserId,\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  // User management\r\n  getAllUsers: superAdminAPI.getAllUsers,\r\n  getUserById: superAdminAPI.getUserById,\r\n  updateUser: superAdminAPI.updateUser,\r\n  deleteUser: superAdminAPI.deleteUser,\r\n  forcePasswordChange: superAdminAPI.forcePasswordChange,\r\n\r\n  // Farmer management\r\n  createFarmer: farmersAPI.createFarmer,\r\n  getFarmerById: farmersAPI.getFarmerById,\r\n  getAllFarmers: farmersAPI.getAllFarmers,\r\n  updateFarmer: farmersAPI.updateFarmer,\r\n  deleteFarmer: farmersAPI.deleteFarmer,\r\n  getAddressByPincode: authAPI.getAddressByPincode,\r\n  getFarmerDashboardData: async (email) => {\r\n    try {\r\n      const response = await api.get(`/farmers/dashboard/by-email?email=${email}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.warn('Farmer dashboard endpoint not available, trying alternative:', error);\r\n      // Try alternative endpoint\r\n      try {\r\n        const response = await api.get(`/farmers/by-email?email=${email}`);\r\n        return response.data;\r\n      } catch (altError) {\r\n        console.warn('Alternative farmer endpoint also failed:', altError);\r\n        throw error; // Re-throw original error\r\n      }\r\n    }\r\n  },\r\n\r\n  // Employee management\r\n  createEmployee: employeesAPI.createEmployee,\r\n  getEmployeeById: employeesAPI.getEmployeeById,\r\n  getAllEmployees: employeesAPI.getAllEmployees,\r\n  updateEmployee: employeesAPI.updateEmployee,\r\n  deleteEmployee: employeesAPI.deleteEmployee,\r\n  assignFarmerToEmployee: adminAPI.assignFarmer,\r\n  getFarmersByEmployee: adminAPI.getFarmersByEmployee,\r\n  approveKyc: kycAPI.approveKYC,\r\n  referBackKyc: kycAPI.referBackKYC,\r\n  rejectKyc: kycAPI.rejectKYC,\r\n\r\n  // Dashboard\r\n  getDashboardStats: dashboardAPI.getDashboardStats,\r\n  getRecentActivity: dashboardAPI.getRecentActivity,\r\n  getFarmerStats: farmersAPI.getFarmerStats,\r\n  getEmployeeStats: employeesAPI.getEmployeeStats,\r\n  getKycStats: kycAPI.getKYCStatus,\r\n\r\n  // Bulk Operations\r\n  bulkImport: async (type, formData) => {\r\n    const response = await api.post(`/bulk/import/${type}`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  bulkExport: async (type, filters) => {\r\n    const response = await api.post(`/bulk/export/${type}`, filters, {\r\n      responseType: 'blob',\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  downloadTemplate: async (type) => {\r\n    const response = await api.get(`/bulk/template/${type}`, {\r\n      responseType: 'blob',\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getImportStatus: async (importId) => {\r\n    const response = await api.get(`/bulk/import/status/${importId}`);\r\n    return response.data;\r\n  },\r\n\r\n  getImportHistory: async (userEmail) => {\r\n    const response = await api.get(`/bulk/import/history?userEmail=${userEmail}`);\r\n    return response.data;\r\n  },\r\n\r\n  bulkAssignFarmersToEmployee: async (farmerIds, employeeId) => {\r\n    const response = await api.post('/bulk/assign/farmers-to-employee', null, {\r\n      params: {\r\n        farmerIds: farmerIds.join(','),\r\n        employeeId,\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // New: assign by farmer names and employee email\r\n  bulkAssignFarmersByNames: async (farmerNames, employeeEmail) => {\r\n    const response = await api.post('/bulk/assign/farmers-by-names', {\r\n      farmerNames,\r\n      employeeEmail,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  bulkAssignFarmersByLocation: async (location, employee) => {\r\n    const params = { location };\r\n    if (typeof employee === 'string') params.employeeEmail = employee;\r\n    else if (employee != null) params.employeeId = employee;\r\n    const response = await api.post('/bulk/assign/farmers-by-location', null, { params });\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,GAAG,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrB;EACAC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B;IACA,MAAMC,OAAO,GAAG;MACdC,QAAQ,EAAEF,WAAW,CAACE,QAAQ,IAAIF,WAAW,CAACG,QAAQ,IAAIH,WAAW,CAACI,KAAK;MAC3EC,QAAQ,EAAEL,WAAW,CAACK;IACxB,CAAC;IACD,MAAMd,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,aAAa,EAAEL,OAAO,CAAC;IACvD,OAAOV,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB;IACA,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMrC,GAAG,CAACsC,GAAG,CAAC,eAAe,CAAC;MAC1C,OAAOD,GAAG,CAACF,IAAI;IACjB,CAAC,CAAC,OAAOI,EAAE,EAAE;MACX,IAAI;QACF,MAAMF,GAAG,GAAG,MAAMrC,GAAG,CAACsC,GAAG,CAAC,UAAU,CAAC;QACrC,OAAOD,GAAG,CAACF,IAAI;MACjB,CAAC,CAAC,OAAOK,EAAE,EAAE;QACX,IAAI;UACF,MAAMH,GAAG,GAAG,MAAMrC,GAAG,CAACsC,GAAG,CAAC,eAAe,CAAC;UAC1C,OAAOD,GAAG,CAACF,IAAI;QACjB,CAAC,CAAC,OAAOM,EAAE,EAAE;UACX,MAAMJ,GAAG,GAAG,MAAMrC,GAAG,CAACsC,GAAG,CAAC,qBAAqB,CAAC;UAChD,OAAOD,GAAG,CAACF,IAAI;QACjB;MACF;IACF;EACF,CAAC;EAED;EACAO,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,MAAMxB,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,gBAAgB,EAAES,QAAQ,CAAC;IAC3D,OAAOxB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAS,OAAO,EAAE,MAAOZ,KAAK,IAAK;IACxB,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,gBAAgB,EAAE;QAAEW,YAAY,EAAEb;MAAM,CAAC,EAAE;QACzE1B,OAAO,EAAE,KAAK,CAAC;MACjB,CAAC,CAAC;MACF,OAAOa,QAAQ,CAACgB,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd,IAAIA,KAAK,CAAC8B,IAAI,KAAK,cAAc,IAAI9B,KAAK,CAAC+B,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACtE,MAAM,IAAIC,KAAK,CAAC,6EAA6E,CAAC;MAChG;MACA,MAAMjC,KAAK;IACb;EACF,CAAC;EAED;EACAkC,SAAS,EAAE,MAAOC,OAAO,IAAK;IAC5B,IAAI;MACF,MAAMhC,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kBAAkB,EAAE;QAClDW,YAAY,EAAEM,OAAO,CAACnB,KAAK;QAC3BoB,GAAG,EAAED,OAAO,CAACC;MACf,CAAC,EAAE;QACD9C,OAAO,EAAE,KAAK,CAAC;MACjB,CAAC,CAAC;MACF,OAAOa,QAAQ,CAACgB,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd,IAAIA,KAAK,CAAC8B,IAAI,KAAK,cAAc,IAAI9B,KAAK,CAAC+B,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACtE,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;MAClE;MACA,MAAMjC,KAAK;IACb;EACF,CAAC;EAED;EACAqC,SAAS,EAAE,MAAOrB,KAAK,IAAK;IAC1B,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kBAAkB,EAAE;QAAEW,YAAY,EAAEb;MAAM,CAAC,EAAE;QAC3E1B,OAAO,EAAE,KAAK,CAAC;MACjB,CAAC,CAAC;MACF,OAAOa,QAAQ,CAACgB,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACd,IAAIA,KAAK,CAAC8B,IAAI,KAAK,cAAc,IAAI9B,KAAK,CAAC+B,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACtE,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;MAC/F;MACA,MAAMjC,KAAK;IACb;EACF,CAAC;EAED;EACAsC,cAAc,EAAE,MAAOT,YAAY,IAAK;IACtC,MAAM1B,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,uBAAuB,EAAE;MAAEW;IAAa,CAAC,CAAC;IAC1E,OAAO1B,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAoB,YAAY,EAAE,MAAOV,YAAY,IAAK;IACpC,MAAM1B,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,sBAAsB,EAAE;MAAEW;IAAa,CAAC,CAAC;IACzE,OAAO1B,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAqB,aAAa,EAAE,MAAOC,SAAS,IAAK;IAClC,MAAMtC,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,sBAAsB,EAAEuB,SAAS,CAAC;IAClE,OAAOtC,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAuB,cAAc,EAAE,MAAOC,YAAY,IAAK;IACtC,MAAMxC,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,uBAAuB,EAAEyB,YAAY,CAAC;IACtE,OAAOxC,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAyB,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,MAAM1C,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,sBAAsB,EAAE2B,UAAU,CAAC;IACnE,OAAO1C,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA2B,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAM3C,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,iBAAiB,CAAC;IACjD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA4B,SAAS,EAAE,MAAOC,SAAS,IAAK;IAC9B,MAAM7C,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,cAAc,EAAE;MAAE8B;IAAU,CAAC,CAAC;IAC9D,OAAO7C,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA8B,mBAAmB,EAAE,MAAOC,OAAO,IAAK;IACtC,MAAM/C,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,iBAAiB4B,OAAO,EAAE,CAAC;IAC1D,OAAO/C,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMgC,QAAQ,GAAG;EACtB;EACAC,uBAAuB,EAAE,MAAAA,CAAA,KAAY;IACnC,MAAMjD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,8BAA8B,CAAC;IAC9D,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAkC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAMlD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,uBAAuB,CAAC;IACvD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAmC,mBAAmB,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC3C,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,0BAA0B,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IAC/E,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAsC,2BAA2B,EAAE,MAAOpD,MAAM,IAAK;IAC7C,MAAMF,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,iCAAiC,EAAE;MAAEkC,MAAM,EAAE;QAAEnD;MAAO;IAAE,CAAC,CAAC;IACzF,OAAOF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAuC,mBAAmB,EAAE,MAAOC,KAAK,IAAK;IACpC,MAAMxD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,iCAAiC,EAAE;MAAEkC,MAAM,EAAE;QAAEG;MAAM;IAAE,CAAC,CAAC;IACxF,OAAOxD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAyC,WAAW,EAAE,MAAAA,CAAOC,MAAM,EAAEC,IAAI,KAAK;IACnC,MAAM3D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,gBAAgBF,MAAM,UAAU,EAAE;MAAEC;IAAK,CAAC,CAAC;IAC1E,OAAO3D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA6C,UAAU,EAAE,MAAAA,CAAOH,MAAM,EAAEI,MAAM,KAAK;IACpC,MAAM9D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,gBAAgBF,MAAM,SAAS,EAAE;MAAEI;IAAO,CAAC,CAAC;IAC3E,OAAO9D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA+C,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,MAAM/D,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAgD,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,MAAMhE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAiD,uBAAuB,EAAE,MAAAA,CAAA,KAAY;IACnC,MAAMjE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,yBAAyB,CAAC;IACzD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAkD,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMlE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,yBAAyB,CAAC;IACzD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAmD,qBAAqB,EAAE,MAAAA,CAAA,KAAY;IACjC,MAAMnE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,6BAA6B,CAAC;IAC7D,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAoD,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMpE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAqD,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMrE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAsD,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,MAAMtE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,2BAA2B,CAAC;IAC3D,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAuD,sBAAsB,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,UAAU,KAAK;IACtD,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,sBAAsB,EAAE,IAAI,EAAE;MAC5DsC,MAAM,EAAE;QAAEmB,QAAQ;QAAEC;MAAW;IACjC,CAAC,CAAC;IACF,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA0D,iBAAiB,EAAE,MAAAA,CAAOC,SAAS,EAAEF,UAAU,KAAK;IAClD,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,4BAA4B,EAAE;MAC5D4D,SAAS;MAAEF;IACb,CAAC,CAAC;IACF,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA4D,oBAAoB,EAAE,MAAAA,CAAOxB,OAAO,GAAG,CAAC,CAAC,KAAK;IAC5C,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,2BAA2B,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IAChF,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA6D,4BAA4B,EAAE,MAAOC,gBAAgB,IAAK;IACxD,MAAM9E,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,qCAAqC,EAAE;MACpEkC,MAAM,EAAE;QAAEyB;MAAiB;IAC7B,CAAC,CAAC;IACF,OAAO9E,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA+D,aAAa,EAAE,MAAAA,CAAO3B,OAAO,GAAG,CAAC,CAAC,KAAK;IACrC,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,uBAAuB,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IAC5E,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAgE,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMhF,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAiE,oBAAoB,EAAE,MAAOR,UAAU,IAAK;IAC1C,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,oBAAoBsD,UAAU,mBAAmB,CAAC;IACjF,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAkE,mBAAmB,EAAE,MAAAA,CAAO9B,OAAO,GAAG,CAAC,CAAC,KAAK;IAC3C,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,0BAA0B,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IAC/E,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAsC,2BAA2B,EAAE,MAAOpD,MAAM,IAAK;IAC7C,MAAMF,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,iCAAiC,EAAE;MAAEkC,MAAM,EAAE;QAAEnD;MAAO;IAAE,CAAC,CAAC;IACzF,OAAOF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAuC,mBAAmB,EAAE,MAAOC,KAAK,IAAK;IACpC,MAAMxD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,iCAAiC,EAAE;MAAEkC,MAAM,EAAE;QAAEG;MAAM;IAAE,CAAC,CAAC;IACxF,OAAOxD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAmE,eAAe,EAAE,MAAOV,UAAU,IAAK;IACrC,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,oBAAoBsD,UAAU,EAAE,CAAC;IAChE,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAoE,cAAc,EAAE,MAAAA,CAAOX,UAAU,EAAEY,YAAY,KAAK;IAClD,MAAMrF,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,oBAAoBa,UAAU,EAAE,EAAEY,YAAY,CAAC;IAC9E,OAAOrF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAsE,mBAAmB,EAAE,MAAAA,CAAOC,cAAc,EAAEC,YAAY,KAAK;IAC3D,MAAMxF,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,wBAAwBwE,cAAc,UAAU,EAAEC,YAAY,CAAC;IAC/F,OAAOxF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAyE,kBAAkB,EAAE,MAAAA,CAAOF,cAAc,EAAEG,aAAa,KAAK;IAC3D,MAAM1F,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,wBAAwBwE,cAAc,SAAS,EAAEG,aAAa,CAAC;IAC/F,OAAO1F,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM2E,aAAa,GAAG;EAC3B;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAM5F,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,gCAAgC,CAAC;IAChE,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAmC,mBAAmB,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC3C,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,gCAAgC,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IACrF,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAsC,2BAA2B,EAAE,MAAOpD,MAAM,IAAK;IAC7C,MAAMF,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,uCAAuC,EAAE;MAAEkC,MAAM,EAAE;QAAEnD;MAAO;IAAE,CAAC,CAAC;IAC/F,OAAOF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAuC,mBAAmB,EAAE,MAAOC,KAAK,IAAK;IACpC,MAAMxD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,uCAAuC,EAAE;MAAEkC,MAAM,EAAE;QAAEG;MAAM;IAAE,CAAC,CAAC;IAC9F,OAAOxD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAiC,uBAAuB,EAAE,MAAAA,CAAA,KAAY;IACnC,MAAMjD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,oCAAoC,CAAC;IACpE,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAkC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAMlD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,6BAA6B,CAAC;IAC7D,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA6E,cAAc,EAAE,MAAOlC,IAAI,IAAK;IAC9B,MAAM3D,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,8BAA8BwC,IAAI,EAAE,CAAC;IACpE,OAAO3D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA8E,qBAAqB,EAAE,MAAOnC,IAAI,IAAK;IACrC,MAAM3D,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,sCAAsCwC,IAAI,EAAE,CAAC;IAC5E,OAAO3D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAyC,WAAW,EAAE,MAAAA,CAAOC,MAAM,EAAEC,IAAI,KAAK;IACnC,IAAI;MACF;MACA,IAAI3D,QAAQ;MACZ,IAAI+F,SAAS;;MAEb;MACA,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGvC,MAAM,GAAG,UAAU,CAAC;QAC/D1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,eAAeF,MAAM,UAAU,EAAE;UAAEC;QAAK,CAAC,CAAC;QACnEqC,OAAO,CAACC,GAAG,CAAC,iCAAiC,GAAGvC,MAAM,GAAG,UAAU,CAAC;QACpE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAqG,gBAAA;QACdH,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,WAAW,GAAAwC,gBAAA,GAAErG,KAAK,CAACG,QAAQ,cAAAkG,gBAAA,uBAAdA,gBAAA,CAAgBhG,MAAM,CAAC;MAC9F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAAGvC,MAAM,GAAG,UAAU,CAAC;QAChE1D,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,eAAe2C,MAAM,UAAU,EAAE;UAAEC;QAAK,CAAC,CAAC;QACpEqC,OAAO,CAACC,GAAG,CAAC,kCAAkC,GAAGvC,MAAM,GAAG,UAAU,CAAC;QACrE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAsG,gBAAA;QACdJ,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,iCAAiC,GAAGvC,MAAM,GAAG,WAAW,GAAAyC,gBAAA,GAAEtG,KAAK,CAACG,QAAQ,cAAAmG,gBAAA,uBAAdA,gBAAA,CAAgBjG,MAAM,CAAC;MAC/F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,mCAAmC,GAAGvC,MAAM,GAAG,UAAU,CAAC;QACtE1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,sBAAsBF,MAAM,UAAU,EAAE;UAAEC;QAAK,CAAC,CAAC;QAC1EqC,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGvC,MAAM,GAAG,UAAU,CAAC;QAC3E,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAuG,gBAAA;QACdL,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,uCAAuC,GAAGvC,MAAM,GAAG,WAAW,GAAA0C,gBAAA,GAAEvG,KAAK,CAACG,QAAQ,cAAAoG,gBAAA,uBAAdA,gBAAA,CAAgBlG,MAAM,CAAC;MACrG;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,UAAU,CAAC;QACnE1D,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kBAAkB2C,MAAM,UAAU,EAAE;UAC5D2C,UAAU,EAAE,aAAa;UACzBC,aAAa,EAAE,4BAA4B3C,IAAI,EAAE;UACjDA,IAAI,EAAEA;QACR,CAAC,CAAC;QACFqC,OAAO,CAACC,GAAG,CAAC,qCAAqC,GAAGvC,MAAM,GAAG,UAAU,CAAC;QACxE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAA0G,gBAAA;QACdR,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,oCAAoC,GAAGvC,MAAM,GAAG,WAAW,GAAA6C,gBAAA,GAAE1G,KAAK,CAACG,QAAQ,cAAAuG,gBAAA,uBAAdA,gBAAA,CAAgBrG,MAAM,CAAC;MAClG;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGvC,MAAM,GAAG,UAAU,CAAC;QAC9D1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,cAAcF,MAAM,UAAU,EAAE;UAAEC;QAAK,CAAC,CAAC;QAClEqC,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,UAAU,CAAC;QACnE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAA2G,gBAAA;QACdT,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,+BAA+B,GAAGvC,MAAM,GAAG,WAAW,GAAA8C,gBAAA,GAAE3G,KAAK,CAACG,QAAQ,cAAAwG,gBAAA,uBAAdA,gBAAA,CAAgBtG,MAAM,CAAC;MAC7F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC7D1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,cAAcF,MAAM,SAAS,EAAE;UAAExD,MAAM,EAAE,UAAU;UAAEyD;QAAK,CAAC,CAAC;QACrFqC,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAClE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAA4G,gBAAA;QACdV,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,+BAA+B,GAAGvC,MAAM,GAAG,UAAU,GAAA+C,gBAAA,GAAE5G,KAAK,CAACG,QAAQ,cAAAyG,gBAAA,uBAAdA,gBAAA,CAAgBvG,MAAM,CAAC;MAC5F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGvC,MAAM,GAAG,SAAS,CAAC;QACzD1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,UAAUF,MAAM,SAAS,EAAE;UAAExD,MAAM,EAAE,UAAU;UAAEyD;QAAK,CAAC,CAAC;QACjFqC,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC9D,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAA6G,gBAAA;QACdX,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGvC,MAAM,GAAG,UAAU,GAAAgD,gBAAA,GAAE7G,KAAK,CAACG,QAAQ,cAAA0G,gBAAA,uBAAdA,gBAAA,CAAgBxG,MAAM,CAAC;MACxF;;MAEA;MACA,MAAM6F,SAAS;IACjB,CAAC,CAAC,OAAOlG,KAAK,EAAE;MAAA,IAAA8G,gBAAA;MACdX,OAAO,CAACnG,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDmG,OAAO,CAACnG,KAAK,CAAC,mBAAmB,GAAA8G,gBAAA,GAAE9G,KAAK,CAACG,QAAQ,cAAA2G,gBAAA,uBAAdA,gBAAA,CAAgB3F,IAAI,CAAC;MACxD,MAAMnB,KAAK;IACb;EACF,CAAC;EAED;EACAgE,UAAU,EAAE,MAAAA,CAAOH,MAAM,EAAEI,MAAM,KAAK;IACpC,IAAI;MACF;MACA,IAAI9D,QAAQ;MACZ,IAAI+F,SAAS;;MAEb;MACA,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC9D1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,eAAeF,MAAM,SAAS,EAAE;UAAEI;QAAO,CAAC,CAAC;QACpEkC,OAAO,CAACC,GAAG,CAAC,iCAAiC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QACnE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAA+G,gBAAA;QACdb,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,UAAU,GAAAkD,gBAAA,GAAE/G,KAAK,CAACG,QAAQ,cAAA4G,gBAAA,uBAAdA,gBAAA,CAAgB1G,MAAM,CAAC;MAC7F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC/D1D,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,eAAe2C,MAAM,SAAS,EAAE;UAAEI;QAAO,CAAC,CAAC;QACrEkC,OAAO,CAACC,GAAG,CAAC,kCAAkC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QACpE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAgH,gBAAA;QACdd,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,iCAAiC,GAAGvC,MAAM,GAAG,UAAU,GAAAmD,gBAAA,GAAEhH,KAAK,CAACG,QAAQ,cAAA6G,gBAAA,uBAAdA,gBAAA,CAAgB3G,MAAM,CAAC;MAC9F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,mCAAmC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QACrE1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,sBAAsBF,MAAM,SAAS,EAAE;UAAEI;QAAO,CAAC,CAAC;QAC3EkC,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC1E,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAiH,iBAAA;QACdf,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,uCAAuC,GAAGvC,MAAM,GAAG,UAAU,GAAAoD,iBAAA,GAAEjH,KAAK,CAACG,QAAQ,cAAA8G,iBAAA,uBAAdA,iBAAA,CAAgB5G,MAAM,CAAC;MACpG;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAClE1D,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kBAAkB2C,MAAM,SAAS,EAAE;UAC3DqD,UAAU,EAAE,aAAa;UACzBC,eAAe,EAAElD,MAAM,IAAI;QAC7B,CAAC,CAAC;QACFkC,OAAO,CAACC,GAAG,CAAC,qCAAqC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QACvE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAoH,iBAAA;QACdlB,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,oCAAoC,GAAGvC,MAAM,GAAG,UAAU,GAAAuD,iBAAA,GAAEpH,KAAK,CAACG,QAAQ,cAAAiH,iBAAA,uBAAdA,iBAAA,CAAgB/G,MAAM,CAAC;MACjG;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC7D1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,cAAcF,MAAM,SAAS,EAAE;UAAEI;QAAO,CAAC,CAAC;QACnEkC,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAClE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAqH,iBAAA;QACdnB,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,+BAA+B,GAAGvC,MAAM,GAAG,UAAU,GAAAwD,iBAAA,GAAErH,KAAK,CAACG,QAAQ,cAAAkH,iBAAA,uBAAdA,iBAAA,CAAgBhH,MAAM,CAAC;MAC5F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC7D1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,cAAcF,MAAM,SAAS,EAAE;UAAExD,MAAM,EAAE,UAAU;UAAE4D;QAAO,CAAC,CAAC;QACvFkC,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAClE,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAsH,iBAAA;QACdpB,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,+BAA+B,GAAGvC,MAAM,GAAG,UAAU,GAAAyD,iBAAA,GAAEtH,KAAK,CAACG,QAAQ,cAAAmH,iBAAA,uBAAdA,iBAAA,CAAgBjH,MAAM,CAAC;MAC5F;;MAEA;MACA,IAAI;QACF8F,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGvC,MAAM,GAAG,SAAS,CAAC;QACzD1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,UAAUF,MAAM,SAAS,EAAE;UAAExD,MAAM,EAAE,UAAU;UAAE4D;QAAO,CAAC,CAAC;QACnFkC,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGvC,MAAM,GAAG,SAAS,CAAC;QAC9D,OAAO1D,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAuH,iBAAA;QACdrB,SAAS,GAAGlG,KAAK;QACjBmG,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGvC,MAAM,GAAG,UAAU,GAAA0D,iBAAA,GAAEvH,KAAK,CAACG,QAAQ,cAAAoH,iBAAA,uBAAdA,iBAAA,CAAgBlH,MAAM,CAAC;MACxF;;MAEA;MACA,MAAM6F,SAAS;IACjB,CAAC,CAAC,OAAOlG,KAAK,EAAE;MAAA,IAAAwH,iBAAA;MACdrB,OAAO,CAACnG,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1DmG,OAAO,CAACnG,KAAK,CAAC,mBAAmB,GAAAwH,iBAAA,GAAExH,KAAK,CAACG,QAAQ,cAAAqH,iBAAA,uBAAdA,iBAAA,CAAgBrG,IAAI,CAAC;MACxD,MAAMnB,KAAK;IACb;EACF,CAAC;EAED;EACAyH,UAAU,EAAE,MAAO5D,MAAM,IAAK;IAC5B,MAAM1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC0I,MAAM,CAAC,sBAAsB7D,MAAM,EAAE,CAAC;IACjE,OAAO1D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAwG,UAAU,EAAE,MAAAA,CAAO9D,MAAM,EAAElC,QAAQ,KAAK;IACtC,MAAMxB,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,sBAAsBF,MAAM,EAAE,EAAElC,QAAQ,CAAC;IACxE,OAAOxB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAyG,gBAAgB,EAAE,MAAAA,CAAO/D,MAAM,EAAExD,MAAM,KAAK;IAC1C,MAAMF,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,eAAeF,MAAM,SAAS,EAAE;MAAExD;IAAO,CAAC,CAAC;IAC1E,OAAOF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAoD,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMpE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,yBAAyB,CAAC;IACzD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA0D,iBAAiB,EAAE,MAAAA,CAAOC,SAAS,EAAEF,UAAU,KAAK;IAClD,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kCAAkC,EAAE;MAAE4D,SAAS;MAAEF;IAAW,CAAC,CAAC;IAC9F,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA0G,YAAY,EAAE,MAAAA,CAAOlD,QAAQ,EAAEC,UAAU,KAAK;IAC5C,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,4BAA4B,EAAE,IAAI,EAAE;MAClEsC,MAAM,EAAE;QAAEmB,QAAQ;QAAEC;MAAW;IACjC,CAAC,CAAC;IACF,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAmE,eAAe,EAAE,MAAOV,UAAU,IAAK;IACrC,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,0BAA0BsD,UAAU,EAAE,CAAC;IACtE,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAoE,cAAc,EAAE,MAAAA,CAAOX,UAAU,EAAEY,YAAY,KAAK;IAClD,MAAMrF,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,0BAA0Ba,UAAU,EAAE,EAAEY,YAAY,CAAC;IACpF,OAAOrF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA2G,WAAW,EAAE,MAAOjE,MAAM,IAAK;IAC7B,MAAM1D,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,sBAAsBuC,MAAM,EAAE,CAAC;IAC9D,OAAO1D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA4G,mBAAmB,EAAE,MAAOlE,MAAM,IAAK;IACrC,MAAM1D,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,sBAAsBF,MAAM,wBAAwB,CAAC;IACpF,OAAO1D,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM6G,UAAU,GAAG;EACxB;EACA9D,aAAa,EAAE,MAAAA,CAAOX,OAAO,GAAG,CAAC,CAAC,KAAK;IACrC,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,sBAAsB,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IAC3E,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA8G,aAAa,EAAE,MAAOC,EAAE,IAAK;IAC3B,MAAM/H,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,wBAAwB4G,EAAE,EAAE,CAAC;IAC5D,OAAO/H,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAgH,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;IAE/B;IACA,MAAMC,KAAK,GAAGH,UAAU,CAACG,KAAK;IAC9B,MAAMC,aAAa,GAAGJ,UAAU,CAACK,YAAY,IAAIL,UAAU,CAACI,aAAa;IACzE,MAAME,OAAO,GAAGN,UAAU,CAACO,gBAAgB,CAAC,CAAC;IAC7C,MAAMC,mBAAmB,GAAGR,UAAU,CAACQ,mBAAmB,IAAIR,UAAU,CAACS,kCAAkC;IAE3G1C,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpCD,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEmC,KAAK,CAAC;IAChCpC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEoC,aAAa,CAAC;IAChDrC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEsC,OAAO,CAAC;IACpCvC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEwC,mBAAmB,CAAC;;IAE5D;IACA,MAAME,SAAS,GAAG;MAAE,GAAGV;IAAW,CAAC;;IAEnC;IACA,OAAOU,SAAS,CAACP,KAAK;IACtB,OAAOO,SAAS,CAACN,aAAa;IAC9B,OAAOM,SAAS,CAACL,YAAY,CAAC,CAAC;IAC/B,OAAOK,SAAS,CAACH,gBAAgB;IACjC,OAAOG,SAAS,CAACF,mBAAmB;IACpC,OAAOE,SAAS,CAACD,kCAAkC;;IAEnD;IACAE,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAACG,OAAO,CAACC,GAAG,IAAI;MACpC,IAAIJ,SAAS,CAACI,GAAG,CAAC,YAAYC,IAAI,IAAIL,SAAS,CAACI,GAAG,CAAC,YAAYE,IAAI,EAAE;QACpE,OAAON,SAAS,CAACI,GAAG,CAAC;MACvB;IACF,CAAC,CAAC;;IAEF;IACA,IAAIJ,SAAS,CAACO,iBAAiB,EAAE;MAC/BP,SAAS,CAACQ,wBAAwB,GAAGR,SAAS,CAACO,iBAAiB;MAChE,OAAOP,SAAS,CAACO,iBAAiB;IACpC;;IAEA;IACA,IAAI,CAACP,SAAS,CAACS,UAAU,EAAET,SAAS,CAACS,UAAU,GAAG,IAAI;IACtD,IAAI,CAACT,SAAS,CAACU,QAAQ,EAAEV,SAAS,CAACU,QAAQ,GAAGV,SAAS,CAACW,SAAS,IAAI,SAAS;IAC9E,IAAI,CAACX,SAAS,CAACY,WAAW,EAAEZ,SAAS,CAACY,WAAW,GAAG,YAAY;IAChE,IAAI,CAACZ,SAAS,CAACa,MAAM,EAAEb,SAAS,CAACa,MAAM,GAAG,MAAM;IAChD,IAAI,CAACb,SAAS,CAACc,WAAW,EAAEd,SAAS,CAACc,WAAW,GAAG,QAAQ;IAC5D,IAAI,CAACd,SAAS,CAACe,OAAO,EAAEf,SAAS,CAACe,OAAO,GAAG,OAAO;;IAEnD;IACA1D,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAE0C,SAAS,CAAC;IACpE3C,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCD,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE0C,SAAS,CAACS,UAAU,CAAC;IACpDpD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE0C,SAAS,CAACW,SAAS,CAAC;IAClDtD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE0C,SAAS,CAACU,QAAQ,CAAC;IAChDrD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE0C,SAAS,CAACY,WAAW,CAAC;IACtDvD,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE0C,SAAS,CAACa,MAAM,CAAC;IAC5CxD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE0C,SAAS,CAACc,WAAW,CAAC;IACtDzD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE0C,SAAS,CAACe,OAAO,CAAC;;IAE9C;IACA,IAAIf,SAAS,CAACgB,aAAa,IAAI,CAAC,UAAU,CAACC,IAAI,CAACjB,SAAS,CAACgB,aAAa,CAAC,EAAE;MACxE3D,OAAO,CAAC6D,IAAI,CAAC,sCAAsC,EAAElB,SAAS,CAACgB,aAAa,CAAC;IAC/E;IACA,IAAIhB,SAAS,CAACQ,wBAAwB,IAAI,CAAC,UAAU,CAACS,IAAI,CAACjB,SAAS,CAACQ,wBAAwB,CAAC,EAAE;MAC9FnD,OAAO,CAAC6D,IAAI,CAAC,kDAAkD,EAAElB,SAAS,CAACQ,wBAAwB,CAAC;IACtG;;IAEA;IACA,IAAIR,SAAS,CAAC5F,OAAO,IAAI,CAAC,SAAS,CAAC6G,IAAI,CAACjB,SAAS,CAAC5F,OAAO,CAAC,EAAE;MAC3DiD,OAAO,CAAC6D,IAAI,CAAC,8BAA8B,EAAElB,SAAS,CAAC5F,OAAO,CAAC;IACjE;;IAEA;IACA,MAAM+G,aAAa,GAAGC,IAAI,CAACC,SAAS,CAACrB,SAAS,CAAC;IAC/C3C,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE6D,aAAa,CAAC;IAC3D9D,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAE0C,SAAS,CAAC;IACpET,QAAQ,CAAC+B,MAAM,CAAC,WAAW,EAAEH,aAAa,CAAC;;IAE3C;IACA,IAAI1B,KAAK,YAAYY,IAAI,EAAE;MACzBd,QAAQ,CAAC+B,MAAM,CAAC,OAAO,EAAE7B,KAAK,CAAC;IACjC;IACA,IAAIC,aAAa,YAAYW,IAAI,EAAE;MACjCd,QAAQ,CAAC+B,MAAM,CAAC,eAAe,EAAE5B,aAAa,CAAC;IACjD;IACA,IAAIE,OAAO,YAAYS,IAAI,EAAE;MAC3Bd,QAAQ,CAAC+B,MAAM,CAAC,SAAS,EAAE1B,OAAO,CAAC;IACrC;IACA,IAAIE,mBAAmB,YAAYO,IAAI,EAAE;MACvCd,QAAQ,CAAC+B,MAAM,CAAC,qBAAqB,EAAExB,mBAAmB,CAAC;IAC7D;IAEAzC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAC7D,IAAI;MACF,MAAMjG,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,UAAU,EAAEmH,QAAQ,EAAE;QACpD9I,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CAAC,CAAC;MACF,OAAOY,QAAQ,CAACgB,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MAAA,IAAAqK,iBAAA,EAAAC,iBAAA;MACdnE,OAAO,CAACnG,KAAK,CAAC,yBAAyB,GAAAqK,iBAAA,GAAErK,KAAK,CAACG,QAAQ,cAAAkK,iBAAA,uBAAdA,iBAAA,CAAgBlJ,IAAI,CAAC;MAC9D,IAAI,EAAAmJ,iBAAA,GAAAtK,KAAK,CAACG,QAAQ,cAAAmK,iBAAA,uBAAdA,iBAAA,CAAgBjK,MAAM,MAAK,GAAG,EAAE;QAAA,IAAAkK,iBAAA,EAAAC,qBAAA;QAClC,MAAM,IAAIvI,KAAK,CAAC,iBAAiB,EAAAsI,iBAAA,GAAAvK,KAAK,CAACG,QAAQ,cAAAoK,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgBpJ,IAAI,cAAAqJ,qBAAA,uBAApBA,qBAAA,CAAsBzI,OAAO,KAAI,0DAA0D,EAAE,CAAC;MACjI;MACA,MAAM/B,KAAK;IACb;EACF,CAAC;EAED;EACAyK,YAAY,EAAE,MAAAA,CAAOvC,EAAE,EAAEE,UAAU,KAAK;IACtC,MAAMjI,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,wBAAwBmE,EAAE,EAAE,EAAEE,UAAU,CAAC;IACxE,OAAOjI,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAuJ,YAAY,EAAE,MAAOxC,EAAE,IAAK;IAC1B,MAAM/H,QAAQ,GAAG,MAAMnB,GAAG,CAAC0I,MAAM,CAAC,wBAAwBQ,EAAE,EAAE,CAAC;IAC/D,OAAO/H,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA0G,YAAY,EAAE,MAAAA,CAAOlD,QAAQ,EAAEC,UAAU,KAAK;IAC5C,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,wBAAwByD,QAAQ,SAAS,EAAE;MAAEC;IAAW,CAAC,CAAC;IAC1F,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAwJ,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAMxK,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,4BAA4B,CAAC;IAC5D,OAAOnB,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAID;AACA,OAAO,MAAMyJ,YAAY,GAAG;EAC1B;EACAzG,eAAe,EAAE,MAAAA,CAAOZ,OAAO,GAAG,CAAC,CAAC,KAAK;IACvC,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,wBAAwB,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IAC7E,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAmE,eAAe,EAAE,MAAO4C,EAAE,IAAK;IAC7B,MAAM/H,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,0BAA0B4G,EAAE,EAAE,CAAC;IAC9D,OAAO/H,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA0J,cAAc,EAAE,MAAOrF,YAAY,IAAK;IACtC,MAAMrF,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,wBAAwB,EAAEsE,YAAY,CAAC;IACvE,OAAOrF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAoE,cAAc,EAAE,MAAAA,CAAO2C,EAAE,EAAE1C,YAAY,KAAK;IAC1C,MAAMrF,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,0BAA0BmE,EAAE,EAAE,EAAE1C,YAAY,CAAC;IAC5E,OAAOrF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA2J,cAAc,EAAE,MAAO5C,EAAE,IAAK;IAC5B,MAAM/H,QAAQ,GAAG,MAAMnB,GAAG,CAAC0I,MAAM,CAAC,0BAA0BQ,EAAE,EAAE,CAAC;IACjE,OAAO/H,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA4J,kBAAkB,EAAE,MAAOnG,UAAU,IAAK;IACxC,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,0BAA0BsD,UAAU,mBAAmB,CAAC;IACvF,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA6J,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAM7K,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,8BAA8B,CAAC;IAC9D,OAAOnB,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM8J,WAAW,GAAG;EACzB;EACAF,kBAAkB,EAAE,MAAOnG,UAAU,IAAK;IACxC,IAAI;MACFuB,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MACnE,MAAMjG,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,uCAAuC,CAAC;MACvE6E,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,OAAOjG,QAAQ,CAACgB,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdmG,OAAO,CAACnG,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAoB,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,MAAMjB,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,oBAAoB,CAAC;IACpD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA+J,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,MAAMhL,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,oBAAoB,EAAEoH,WAAW,CAAC;IACjE,OAAOhL,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAiK,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMjL,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMkK,gBAAgB,GAAG;EAC9B;EACAhG,mBAAmB,EAAE,MAAAA,CAAO9B,OAAO,GAAG,CAAC,CAAC,KAAK;IAC3C,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,gBAAgB,EAAE;MAAEkC,MAAM,EAAED;IAAQ,CAAC,CAAC;IACrE,OAAOpD,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAmK,mBAAmB,EAAE,MAAOpD,EAAE,IAAK;IACjC,MAAM/H,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkB4G,EAAE,EAAE,CAAC;IACtD,OAAO/H,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAsE,mBAAmB,EAAE,MAAAA,CAAOyC,EAAE,EAAEvC,YAAY,KAAK;IAC/C,MAAMxF,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kBAAkBgH,EAAE,UAAU,EAAEvC,YAAY,CAAC;IAC7E,OAAOxF,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAyE,kBAAkB,EAAE,MAAAA,CAAOsC,EAAE,EAAErC,aAAa,KAAK;IAC/C,MAAM1F,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kBAAkBgH,EAAE,SAAS,EAAErC,aAAa,CAAC;IAC7E,OAAO1F,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAoK,oBAAoB,EAAE,MAAAA,CAAA,KAAY;IAChC,MAAMpL,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,sBAAsB,CAAC;IACtD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMqK,MAAM,GAAG;EACpB;EACAC,eAAe,EAAE,MAAAA,CAAO9G,QAAQ,EAAE+G,SAAS,KAAK;IAC9C,MAAMrD,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BS,MAAM,CAACC,IAAI,CAAC0C,SAAS,CAAC,CAACzC,OAAO,CAACC,GAAG,IAAI;MACpC,IAAIwC,SAAS,CAACxC,GAAG,CAAC,EAAE;QAClBb,QAAQ,CAAC+B,MAAM,CAAClB,GAAG,EAAEwC,SAAS,CAACxC,GAAG,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;IAEF,MAAM/I,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kBAAkByD,QAAQ,SAAS,EAAE0D,QAAQ,EAAE;MAC7E9I,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOY,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAwK,UAAU,EAAE,MAAAA,CAAOhH,QAAQ,EAAEgB,YAAY,KAAK;IAC5C,MAAMxF,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,0BAA0BY,QAAQ,EAAE,CAAC;IACpE,OAAOxE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAyK,SAAS,EAAE,MAAAA,CAAOjH,QAAQ,EAAEkB,aAAa,KAAK;IAC5C,MAAM1F,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,yBAAyBY,QAAQ,EAAE,EAAE;MAClEV,MAAM,EAAE4B,aAAa,CAAC5B,MAAM,IAAI;IAClC,CAAC,CAAC;IACF,OAAO9D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA0K,YAAY,EAAE,MAAAA,CAAOlH,QAAQ,EAAEmH,aAAa,KAAK;IAC/C,MAAM3L,QAAQ,GAAG,MAAMnB,GAAG,CAAC+E,GAAG,CAAC,6BAA6BY,QAAQ,EAAE,EAAE;MACtEV,MAAM,EAAE6H,aAAa,CAAC7H,MAAM,IAAI;IAClC,CAAC,CAAC;IACF,OAAO9D,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA4K,YAAY,EAAE,MAAOpH,QAAQ,IAAK;IAChC,MAAMxE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkBqD,QAAQ,SAAS,CAAC;IACnE,OAAOxE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA6K,eAAe,EAAE,MAAOrH,QAAQ,IAAK;IACnC,MAAMxE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkBqD,QAAQ,YAAY,CAAC;IACtE,OAAOxE,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM8K,YAAY,GAAG;EAC1B;EACA1H,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMpE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACA+K,qBAAqB,EAAE,MAAAA,CAAA,KAAY;IACjC,MAAM/L,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAgL,0BAA0B,EAAE,MAAAA,CAAA,KAAY;IACtC,MAAMhM,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOnB,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAiL,wBAAwB,EAAE,MAAOxH,UAAU,IAAK;IAC9C,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,uBAAuBsD,UAAU,EAAE,CAAC;IACnE,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAkL,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,MAAMlM,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,4BAA4B,CAAC;IAC5D,OAAOnB,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMmL,UAAU,GAAG;EACxB;EACA3L,KAAK,EAAED,OAAO,CAACC,KAAK;EACpBS,UAAU,EAAEV,OAAO,CAACU,UAAU;EAC9BM,QAAQ,EAAEhB,OAAO,CAACgB,QAAQ;EAC1BE,OAAO,EAAElB,OAAO,CAACkB,OAAO;EACxBM,SAAS,EAAExB,OAAO,CAACwB,SAAS;EAC5BG,SAAS,EAAE3B,OAAO,CAAC2B,SAAS;EAC5BC,cAAc,EAAE5B,OAAO,CAAC4B,cAAc;EACtCC,YAAY,EAAE7B,OAAO,CAAC6B,YAAY;EAClCC,aAAa,EAAE9B,OAAO,CAAC8B,aAAa;EACpCE,cAAc,EAAEhC,OAAO,CAACgC,cAAc;EACtCE,YAAY,EAAElC,OAAO,CAACkC,YAAY;EAClC2J,MAAM,EAAEA,CAAA,KAAM;IACZ1M,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED;EACAyF,WAAW,EAAED,aAAa,CAACC,WAAW;EACtC+B,WAAW,EAAEhC,aAAa,CAACgC,WAAW;EACtCH,UAAU,EAAE7B,aAAa,CAAC6B,UAAU;EACpCF,UAAU,EAAE3B,aAAa,CAAC2B,UAAU;EACpCM,mBAAmB,EAAEjC,aAAa,CAACiC,mBAAmB;EAEtD;EACAI,YAAY,EAAEH,UAAU,CAACG,YAAY;EACrCF,aAAa,EAAED,UAAU,CAACC,aAAa;EACvC/D,aAAa,EAAE8D,UAAU,CAAC9D,aAAa;EACvCuG,YAAY,EAAEzC,UAAU,CAACyC,YAAY;EACrCC,YAAY,EAAE1C,UAAU,CAAC0C,YAAY;EACrCzH,mBAAmB,EAAEvC,OAAO,CAACuC,mBAAmB;EAChDuJ,sBAAsB,EAAE,MAAOxL,KAAK,IAAK;IACvC,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,qCAAqCN,KAAK,EAAE,CAAC;MAC5E,OAAOb,QAAQ,CAACgB,IAAI;IACtB,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdmG,OAAO,CAAC6D,IAAI,CAAC,8DAA8D,EAAEhK,KAAK,CAAC;MACnF;MACA,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,2BAA2BN,KAAK,EAAE,CAAC;QAClE,OAAOb,QAAQ,CAACgB,IAAI;MACtB,CAAC,CAAC,OAAOsL,QAAQ,EAAE;QACjBtG,OAAO,CAAC6D,IAAI,CAAC,0CAA0C,EAAEyC,QAAQ,CAAC;QAClE,MAAMzM,KAAK,CAAC,CAAC;MACf;IACF;EACF,CAAC;EAED;EACA6K,cAAc,EAAED,YAAY,CAACC,cAAc;EAC3CvF,eAAe,EAAEsF,YAAY,CAACtF,eAAe;EAC7CnB,eAAe,EAAEyG,YAAY,CAACzG,eAAe;EAC7CoB,cAAc,EAAEqF,YAAY,CAACrF,cAAc;EAC3CuF,cAAc,EAAEF,YAAY,CAACE,cAAc;EAC3CpG,sBAAsB,EAAEvB,QAAQ,CAAC0E,YAAY;EAC7CzC,oBAAoB,EAAEjC,QAAQ,CAACiC,oBAAoB;EACnDsH,UAAU,EAAElB,MAAM,CAACG,UAAU;EAC7BgB,YAAY,EAAEnB,MAAM,CAACK,YAAY;EACjCe,SAAS,EAAEpB,MAAM,CAACI,SAAS;EAE3B;EACArH,iBAAiB,EAAE0H,YAAY,CAAC1H,iBAAiB;EACjD8H,iBAAiB,EAAEJ,YAAY,CAACI,iBAAiB;EACjD1B,cAAc,EAAE3C,UAAU,CAAC2C,cAAc;EACzCK,gBAAgB,EAAEJ,YAAY,CAACI,gBAAgB;EAC/C6B,WAAW,EAAErB,MAAM,CAACO,YAAY;EAEhC;EACAe,UAAU,EAAE,MAAAA,CAAOC,IAAI,EAAE1E,QAAQ,KAAK;IACpC,MAAMlI,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,gBAAgB6L,IAAI,EAAE,EAAE1E,QAAQ,EAAE;MAChE9I,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOY,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED6L,UAAU,EAAE,MAAAA,CAAOD,IAAI,EAAExJ,OAAO,KAAK;IACnC,MAAMpD,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,gBAAgB6L,IAAI,EAAE,EAAExJ,OAAO,EAAE;MAC/D0J,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAO9M,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED+L,gBAAgB,EAAE,MAAOH,IAAI,IAAK;IAChC,MAAM5M,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kBAAkByL,IAAI,EAAE,EAAE;MACvDE,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAO9M,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAEDgM,eAAe,EAAE,MAAOC,QAAQ,IAAK;IACnC,MAAMjN,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,uBAAuB8L,QAAQ,EAAE,CAAC;IACjE,OAAOjN,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAEDkM,gBAAgB,EAAE,MAAOC,SAAS,IAAK;IACrC,MAAMnN,QAAQ,GAAG,MAAMnB,GAAG,CAACsC,GAAG,CAAC,kCAAkCgM,SAAS,EAAE,CAAC;IAC7E,OAAOnN,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAEDoM,2BAA2B,EAAE,MAAAA,CAAOzI,SAAS,EAAEF,UAAU,KAAK;IAC5D,MAAMzE,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kCAAkC,EAAE,IAAI,EAAE;MACxEsC,MAAM,EAAE;QACNsB,SAAS,EAAEA,SAAS,CAAC0I,IAAI,CAAC,GAAG,CAAC;QAC9B5I;MACF;IACF,CAAC,CAAC;IACF,OAAOzE,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAED;EACAsM,wBAAwB,EAAE,MAAAA,CAAOC,WAAW,EAAEC,aAAa,KAAK;IAC9D,MAAMxN,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,+BAA+B,EAAE;MAC/DwM,WAAW;MACXC;IACF,CAAC,CAAC;IACF,OAAOxN,QAAQ,CAACgB,IAAI;EACtB,CAAC;EAEDyM,2BAA2B,EAAE,MAAAA,CAAOpN,QAAQ,EAAEqN,QAAQ,KAAK;IACzD,MAAMrK,MAAM,GAAG;MAAEhD;IAAS,CAAC;IAC3B,IAAI,OAAOqN,QAAQ,KAAK,QAAQ,EAAErK,MAAM,CAACmK,aAAa,GAAGE,QAAQ,CAAC,KAC7D,IAAIA,QAAQ,IAAI,IAAI,EAAErK,MAAM,CAACoB,UAAU,GAAGiJ,QAAQ;IACvD,MAAM1N,QAAQ,GAAG,MAAMnB,GAAG,CAACkC,IAAI,CAAC,kCAAkC,EAAE,IAAI,EAAE;MAAEsC;IAAO,CAAC,CAAC;IACrF,OAAOrD,QAAQ,CAACgB,IAAI;EACtB;AACF,CAAC;AAED,eAAenC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}